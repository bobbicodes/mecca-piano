["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\r\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\r\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\r\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\r\n});\r\n/**\r\n * Create an interceptor from named arguments\r\n */\r\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___26004 = arguments.length;\r\nvar i__5770__auto___26005 = (0);\r\nwhile(true){\r\nif((i__5770__auto___26005 < len__5769__auto___26004)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___26005]));\r\n\r\nvar G__26006 = (i__5770__auto___26005 + (1));\r\ni__5770__auto___26005 = G__26006;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__25961){\r\nvar map__25965 = p__25961;\r\nvar map__25965__$1 = cljs.core.__destructure_map(map__25965);\r\nvar m = map__25965__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25965__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25965__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\r\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25965__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5802__auto___26007 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\r\nif(temp__5802__auto___26007){\r\nvar unknown_keys_26008 = temp__5802__auto___26007;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_26008], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5045__auto__ = id;\r\nif(cljs.core.truth_(or__5045__auto__)){\r\nreturn or__5045__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\r\n}\r\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\r\n}));\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq25957){\r\nvar self__5755__auto__ = this;\r\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq25957));\r\n}));\r\n\r\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\r\nvar G__25975 = arguments.length;\r\nswitch (G__25975) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\r\n});\r\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___26014 = arguments.length;\r\nvar i__5770__auto___26015 = (0);\r\nwhile(true){\r\nif((i__5770__auto___26015 < len__5769__auto___26014)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___26015]));\r\n\r\nvar G__26016 = (i__5770__auto___26015 + (1));\r\ni__5770__auto___26015 = G__26016;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((3) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq25978){\r\nvar G__25979 = cljs.core.first(seq25978);\r\nvar seq25978__$1 = cljs.core.next(seq25978);\r\nvar G__25980 = cljs.core.first(seq25978__$1);\r\nvar seq25978__$2 = cljs.core.next(seq25978__$1);\r\nvar G__25981 = cljs.core.first(seq25978__$2);\r\nvar seq25978__$3 = cljs.core.next(seq25978__$2);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__25979,G__25980,G__25981,seq25978__$3);\r\n}));\r\n\r\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\r\nvar G__25985 = arguments.length;\r\nswitch (G__25985) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\r\n});\r\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___26018 = arguments.length;\r\nvar i__5770__auto___26019 = (0);\r\nwhile(true){\r\nif((i__5770__auto___26019 < len__5769__auto___26018)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___26019]));\r\n\r\nvar G__26021 = (i__5770__auto___26019 + (1));\r\ni__5770__auto___26019 = G__26021;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((3) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq25990){\r\nvar G__25991 = cljs.core.first(seq25990);\r\nvar seq25990__$1 = cljs.core.next(seq25990);\r\nvar G__25992 = cljs.core.first(seq25990__$1);\r\nvar seq25990__$2 = cljs.core.next(seq25990__$1);\r\nvar G__25993 = cljs.core.first(seq25990__$2);\r\nvar seq25990__$3 = cljs.core.next(seq25990__$2);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__25991,G__25992,G__25993,seq25990__$3);\r\n}));\r\n\r\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\r\nvar temp__5802__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\r\nif(cljs.core.truth_(temp__5802__auto__)){\r\nvar f = temp__5802__auto__;\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\r\n} else {\r\nreturn context;\r\n}\r\n});\r\n/**\r\n * Loop over all interceptors, calling `direction` function on each,\r\n *   threading the value of `context` through every call.\r\n * \r\n *   `direction` is one of `:before` or `:after`.\r\n * \r\n *   Each iteration, the next interceptor to process is obtained from\r\n *   context's `:queue`. After they are processed, interceptors are popped\r\n *   from `:queue` and added to `:stack`.\r\n * \r\n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\r\n *   contain all interceptors processed.\r\n * \r\n *   Returns updated `context`. Ie. the `context` which has been threaded\r\n *   through all interceptor functions.\r\n * \r\n *   Generally speaking, an interceptor's `:before` function will (if present)\r\n *   add to a `context's` `:coeffects`, while it's `:after` function\r\n *   will modify the `context`'s `:effects`.  Very approximately.\r\n * \r\n *   But because all interceptor functions are given `context`, and can\r\n *   return a modified version of it, the way is clear for an interceptor\r\n *   to introspect the stack or queue, or even modify the queue\r\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\r\n */\r\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\r\nvar context__$1 = context;\r\nwhile(true){\r\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nif(cljs.core.empty_QMARK_(queue)){\r\nreturn context__$1;\r\n} else {\r\nvar interceptor = cljs.core.peek(queue);\r\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nvar G__26022 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\r\ncontext__$1 = G__26022;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\r\n *   Returns the updated `context`.\r\n * \r\n *   In an advanced case, this function could allow an interceptor to add new\r\n *   interceptors to the `:queue` of a context.\r\n */\r\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\r\n});\r\n/**\r\n * Create a fresh context\r\n */\r\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\r\nvar G__25997 = arguments.length;\r\nswitch (G__25997) {\r\ncase 2:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\r\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\r\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Called on completion of `:before` processing, this function prepares/modifies\r\n * `context` for the backwards sweep of processing in which an interceptor\r\n * chain's `:after` fns are called.\r\n * \r\n *   At this point in processing, the `:queue` is empty and `:stack` holds all\r\n *   the previously run interceptors. So this function enables the backwards walk\r\n *   by priming `:queue` with what's currently in `:stack`\r\n */\r\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\r\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\r\n});\r\n/**\r\n * Executes the given chain (coll) of interceptors.\r\n * \r\n * Each interceptor has this form:\r\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\r\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\r\n * \r\n * Walks the queue of iterceptors from beginning to end, calling the\r\n * `:before` fn on each, then reverse direction and walk backwards,\r\n * calling the `:after` fn on each.\r\n * \r\n * The last interceptor in the chain presumably wraps an event\r\n * handler fn. So the overall goal of the process is to \"handle\r\n * the given event\".\r\n * \r\n * Thread a `context` through all calls. `context` has this form:\r\n * \r\n *   {:coeffects {:event [:a-query-id :some-param]\r\n *                :db    <original contents of app-db>}\r\n *    :effects   {:db    <new value for app-db>\r\n *                :dispatch  [:an-event-id :param1]}\r\n *    :queue     <a collection of further interceptors>\r\n *    :stack     <a collection of interceptors already walked>}\r\n * \r\n * `context` has `:coeffects` and `:effects` which, if this was a web\r\n * server, would be somewhat anologous to `request` and `response`\r\n * respectively.\r\n * \r\n * `coeffects` will contain data like `event` and the initial\r\n * state of `db` -  the inputs required by the event handler\r\n * (sitting presumably on the end of the chain), while handler-returned\r\n * side effects are put into `:effects` including, but not limited to,\r\n * new values for `db`.\r\n * \r\n * The first few interceptors in a chain will likely have `:before`\r\n * functions which \"prime\" the `context` by adding the event, and\r\n * the current state of app-db into `:coeffects`. But interceptors can\r\n * add whatever they want to `:coeffects` - perhaps the event handler needs\r\n * some information from localstore, or a random number, or access to\r\n * a DataScript connection.\r\n * \r\n * Equally, some interceptors in the chain will have `:after` fn\r\n * which can process the side effects accumulated into `:effects`\r\n * including but, not limited to, updates to app-db.\r\n * \r\n * Through both stages (before and after), `context` contains a `:queue`\r\n * of interceptors yet to be processed, and a `:stack` of interceptors\r\n * already done.  In advanced cases, these values can be modified by the\r\n * functions through which the context is threaded.\r\n */\r\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__25877__auto___26026 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__25877__auto___26026);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^R","~$re-frame.interop","^S","~$re-frame.trace","^T","~$trace","^T","~$clojure.set","^V","~$set","^V","~$cljs.core","^X","~$goog","^Y"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$console","^R","~$empty-queue","^S","~$debug-enabled?","^S"],"~:require-macros",["^ ","^T","^T","^U","^T","^X","^X"],"~:form",["~#list",["~$ns","^L",["^16",["^[",["^R","~:refer",["^11"]],["^S","^18",["^12","^13"]],["^T","~:as","^U","~:include-macros",true],["^V","^19","^W"]]]]],"~:flags",["^ ","^[",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^R","^S","^T","^V"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1703059269831,"^M",["^ ","^R","^R","^S","^S","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^Y"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__25961","map__25965","cljs.core/--destructure-map","cljs.core.get","seq25957","self__5755__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5802__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__5045__auto__","G__25975","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq25978","G__25979","cljs.core/first","cljs.core/next","G__25980","G__25981","self__5754__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__25985","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq25990","G__25991","G__25992","G__25993","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__25997","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__25877__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^J",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1?","reagent/impl/batching.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1?","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.dom.HtmlElement"]]],["^1?","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1?","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.asserts"]]],["^1?","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^31","^32","^35","^30","^33","^34"]]],["^1?","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^30"]]],["^1?","re_frame/loggers.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^V"]]],["^1?","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35"]]],["^1?","reagent/impl/util.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^2W","^2X","^2Z"]]],["^1?","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^31","~$goog.reflect","^30"]]],["^2O","node_modules/fbjs/lib/emptyFunction.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","e4c24d86bdc1d3fdfdea4bcd8ad79ede5d045fb0","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^1?","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^2O","node_modules/fbjs/lib/emptyObject.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","3b34d3f45a149b2a8016477c9ffbe011103fd779","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^1?","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^31","^30"]]],["^2O","node_modules/scheduler/cjs/scheduler.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","f683a524b03498a1510e8212cb7ad7992728f04a","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^1?","reagent/ratom.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^2Y","^2W","~$reagent.impl.batching","^V"]]],["^2O","node_modules/scheduler/cjs/scheduler.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","9472969a489f23335a05beb90573f81a73239194","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^1?","re_frame/interop.cljs"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1?","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^2O","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","d1e7bb5f7c53667de84b51d7535a959d16b917a5","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^2O","node_modules/create-react-class/factory.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","464107f78fd09f8f8b23b79e2c02b43d86966f60","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^2O","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1?","shadow/js.js"],["ab6b31649cb03e352369698781207db4f6da6d5f","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","reagent/impl/template.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^C","^2Z","~$clojure.walk","^2Y","~$reagent.impl.component","^3>","^3A","^2X","^2W"]]],["^1?","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35"]]],["^2O","node_modules/react-dom/cjs/react-dom.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","94bb474c079e06a407e4fa922e58d3c69ee2b649","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","^C","^3B","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1703058451000,1703058451000,1664859296000],["^2O","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","754b7a48941975257c8955f6d5e511cb3a878737","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","^3B"]]],["^1?","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","^3="]]],["^1?","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","~$goog.fs.blob","^36","~$goog.html.SafeScript","~$goog.html.trustedtypes","^38","^39"]]],["^1?","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^2O","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","12fb110a42ab39177d6ab3e0a205e4a8ef350ae2","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^2O","node_modules/fbjs/lib/warning.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","1a9dceee8d9dbda2fffdba852c8b22f247dd139d","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1?","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^38","~$goog.html.SafeUrl","^39","^35","^30"]]],["^1?","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3M","~$goog.html.SafeStyle","^3P","^37","~$goog.html.uncheckedconversions","^38","^30"]]],["^1?","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.dom.TagName","^35","~$goog.dom.element"]]],["^1?","reagent/impl/component.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^E","^C","^2Y","^3>","^3A","^2X","^2W"]]],["^1?","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X"]]],["^1?","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^38","^3M","^3U","~$goog.html.SafeStyleSheet","^3P","^3W","^37","^39","^35","^3:","~$goog.array","~$goog.object","^30","~$goog.dom.tags","^3N"]]],["^1?","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^3["]]],["^1?","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^2O","node_modules/scheduler/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","408126fc2241739168bcaf5965ae56a7df143144","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1?","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^3Z","^30","^31"]]],["^1?","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^3Z","^35","^3Q","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3W","~$goog.dom.safe","^3T","^3V","~$goog.math.Coordinate","~$goog.math.Size","^3[","~$goog.string","^38","~$goog.string.Unicode","~$goog.userAgent"]]],["^1?","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.debug.Error","^44"]]],["^1?","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^3Z","^35","~$goog.collections.maps","^48","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1?","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^32"]]],["^1?","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^2O","node_modules/object-assign/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","519ffd5a4c91b67302cc9947b794966d629860cd","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^1?","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",[]]],["^1?","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^3Z","^3["]]],["^1?","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^48","~$goog.string.StringBuffer"]]],["^2O","node_modules/create-react-class/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","a7020dbd19046ce80d5d792de4a772ebcb222749","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","^C","~$module$node_modules$create_react_class$factory"]]],["^2O","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","0a81b45abe33f0ad39b726512604018f94261db9","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","^3B"]]],["^1?","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35"]]],["^1?","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^45","^3V","^38","^30"]]],["^1?","re_frame/interceptor.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^R","^S","^T","^V"]]],["^1?","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^30","^34"]]],["^1?","reagent/core.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^C","~$reagent.impl.template","^3I","^2Y","^3>","^3A","^2W","^2X","~$reagent.dom"]]],["^1?","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.math"]]],["^1?","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.flags"]]],["^1?","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.debug.entryPointRegistry","~$goog.dom","^3W","^3S","^3:","^3;"]]],["^1?","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^44","^3W"]]],["^1?","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","^3T","^3M","^3U","^3Y","^3P","^37","^38","^30"]]],["^1?","reagent/dom.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^G","^2Y","^4C","^3>","^3A","^2W","^2X"]]],["^1?","reagent/interop.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X"]]],["^1?","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y"]]],["^1?","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","~$goog.math.Long","~$goog.math.Integer","^48","^3[","^3Z","~$goog.Uri","^4A"]]],["^1?","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^38","^39","^3N","^35"]]],["^1?","reagent/debug.cljs"],["417ad50ab1583aeb00751336948481695582950e","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X"]]],["^1?","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^38","^3U","^39","^3[","^35","^30"]]],["^1?","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^3="]]],["^1?","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^4:"]]],["^2O","node_modules/scheduler/tracing.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2O","node_modules/react-dom/cjs/react-dom.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","9e0e7f2f8475431f2b4b8c517c6fabc2273c7857","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T","^C","^3B","^3J","~$module$node_modules$scheduler$tracing"]]],["^1?","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X"]]],["^1?","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","^48"]]],["^1?","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^35","^39"]]],["^2O","node_modules/fbjs/lib/invariant.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","81766ad77bd9ea6a67c23a47aadd9acd4fe8d105","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^2T"]]],["^1?","re_frame/trace.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^2P",["^ ","^2Q",null,"^2R",["^J",[]],"^2S",["^Y","^X","^S","^R","^3S"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/re-frame/re-frame/0.10.8/re-frame-0.10.8.jar!/re_frame/trace.cljc",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/re-frame/re-frame/0.10.8/re-frame-0.10.8.jar!/re_frame/interop.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1656281882000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^S","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^Y"],"^Z",["^J",["^["]],"~:shadow/js-access-global",["^J",["Error"]],"^10",["^ ","^11","^R","^12","^S","^13","^S"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",20,"~:arglists",["^16",["~$quote",["^16",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^16",["^5O","^5P","~$f","^5Q"]]],"^5M",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]],"~:arglists-meta",["^16",[null]]]],"^K","^1W","^6","re_frame/interceptor.cljc","^:",20,"^5R",["^ ","^5S",true,"^5T",3,"^5U",3,"^5V",[["^16",["^5O","^5P","~$f","^5Q"]]],"^5M",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]],"^5W",["^16",[null]]],"^5V",[["^16",["^5O","^5P","~$f","^5Q"]]],"~:protocol-impl",null,"^5T",3,"^5W",["^16",[null]],"^8",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^16",["~$defn","^5K",["^5O","^5P","~$f","~$&","^5Q"],["^16",["~$apply","~$update-in","^5O",["~:effects","^5P"],"~$f","^5Q"]]]]],"^5S",true,"~:methods",[["^ ","^5T",3,"^5S",true,"~:tag","~$any"]],"^7",43,"~:ret-tag","^67","^9",43,"^5U",3,"~:fn-var",true,"^5M",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]]],"~$invoke-interceptors",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",75,"^8",8,"^9",75,"^:",27,"~:private",true,"^5M",["^16",["^5N",["^16",[["^5O","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^6;",true,"^K","^1Y","^6","re_frame/interceptor.cljc","^:",27,"^5V",["^16",[["^5O","^6<"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["~$defn-","^6:","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.",["^16",[["^5O","^6<"],["^16",["~$loop",["^5O","^5O"],["^16",["~$let",["~$queue",["^16",["~:queue","^5O"]]],["^16",["~$if",["^16",["~$empty?","^6A"]],"^5O",["^16",["^6@",["~$interceptor",["^16",["~$peek","^6A"]],"~$stack",["^16",["~:stack","^5O"]]],["^16",["~$recur",["^16",["~$->","^5O",["^16",["~$assoc","^6B",["^16",["~$pop","^6A"]],"^6H",["^16",["~$conj","^6G","^6E"]]]],["^16",["~$invoke-interceptor-fn","^6E","^6<"]]]]]]]]]]]]]]]]]]],"^5S",false,"^7",75,"^9",75,"^5U",2,"^69",true,"^5M",["^16",["^5N",["^16",[["^5O","^6<"]]]]],"^6=","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",57,"^8",7,"^9",57,"^:",21,"^5M",["^16",["^5N",["^16",[["^5O","^5P","~$value"]]]]]],"^K","^2;","^6","re_frame/interceptor.cljc","^:",21,"^5V",["^16",[["^5O","^5P","^6P"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^6O",["^5O","^5P","^6P"],["^16",["~$assoc-in","^5O",["~:coeffects","^5P"],"^6P"]]]]],"^5S",false,"^7",57,"^68",["^J",["~$clj","^67"]],"^9",57,"^5U",3,"^69",true,"^5M",["^16",["^5N",["^16",[["^5O","^5P","^6P"]]]]]],"~$update-coeffect",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",22,"^5M",["^16",["^5N",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]]]],"^5R",["^ ","^5S",true,"^5T",3,"^5U",3,"^5V",[["^16",["^5O","^5P","~$f","^5Q"]]],"^5M",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]],"^5W",["^16",[null]]]],"^K","^28","^6","re_frame/interceptor.cljc","^:",22,"^5R",["^ ","^5S",true,"^5T",3,"^5U",3,"^5V",[["^16",["^5O","^5P","~$f","^5Q"]]],"^5M",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]],"^5W",["^16",[null]]],"^5V",[["^16",["^5O","^5P","~$f","^5Q"]]],"^5X",null,"^5T",3,"^5W",["^16",[null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^6T",["^5O","^5P","~$f","~$&","^5Q"],["^16",["^62","^63","^5O",["^6R","^5P"],"~$f","^5Q"]]]]],"^5S",true,"^65",[["^ ","^5T",3,"^5S",true,"^66","^67"]],"^7",61,"^68","^67","^9",61,"^5U",3,"^69",true,"^5M",["^16",[["^5O","^5P","~$f","~$&","^5Q"]]]],"^6N",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",68,"^8",8,"^9",68,"^:",29,"^6;",true,"^5M",["^16",["^5N",["^16",[["^5O","^6E","^6<"]]]]]],"^6;",true,"^K","^2J","^6","re_frame/interceptor.cljc","^:",29,"^5V",["^16",[["^5O","^6E","^6<"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^6>","^6N",["^5O","^6E","^6<"],["^16",["~$if-let",["~$f",["^16",["~$get","^6E","^6<"]]],["^16",["~$f","^5O"]],"^5O"]]]]],"^5S",false,"^7",68,"^68",["^J",[null,"^67"]],"^9",68,"^5U",3,"^69",true,"^5M",["^16",["^5N",["^16",[["^5O","^6E","^6<"]]]]]],"~$get-effect",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^5M",["^16",["^5N",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","~$not-found"]]]]],"^5R",["^ ","^5S",false,"^5T",3,"^5U",3,"^5V",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]],"^5M",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]],"^5W",["^16",[null,null,null]]]],"^K","^1M","^6","re_frame/interceptor.cljc","^:",17,"^5R",["^ ","^5S",false,"^5T",3,"^5U",3,"^5V",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]],"^5M",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]],"^5W",["^16",[null,null,null]]],"^5V",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]],"^5X",null,"^5T",3,"^5W",["^16",[null,null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^6W",["^16",[["^5O"],["^16",["^64","^5O"]]]],["^16",[["^5O","^5P"],["^16",["~$get-in","^5O",["^64","^5P"]]]]],["^16",[["^5O","^5P","^6X"],["^16",["^6Y","^5O",["^64","^5P"],"^6X"]]]]]]],"^5S",false,"^65",[["^ ","^5T",1,"^5S",false,"^66","^67"],["^ ","^5T",2,"^5S",false,"^66",["^J",[null,"^67"]]],["^ ","^5T",3,"^5S",false,"^66",["^J",[null,"^67"]]]],"^7",31,"^9",31,"^5U",3,"^69",true,"^5M",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]]],"~$->interceptor",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5M",["^16",["^5N",["^16",[["~$&",["^ ","^19","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^6=","Create an interceptor from named arguments","^5R",["^ ","^5S",true,"^5T",0,"^5U",0,"^5V",[["^16",[["^ ","^19","~$m","^6[",["^70","^71","^72"]]]]],"^5M",["^16",[["~$&",["^ ","^19","~$m","^6[",["^70","^71","^72"]]]]],"^5W",["^16",[null]]]],"^K","^1R","^6","re_frame/interceptor.cljc","^:",20,"^5R",["^ ","^5S",true,"^5T",0,"^5U",0,"^5V",[["^16",[["^ ","^19","~$m","^6[",["^70","^71","^72"]]]]],"^5M",["^16",[["~$&",["^ ","^19","~$m","^6[",["^70","^71","^72"]]]]],"^5W",["^16",[null]]],"^5V",[["^16",[["^ ","^19","~$m","^6[",["^70","^71","^72"]]]]],"^5X",null,"^5T",0,"^5W",["^16",[null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^6Z","Create an interceptor from named arguments",["~$&",["^ ","^19","~$m","^6[",["^70","^71","^72"]]],["^16",["~$when","^13",["^16",["^6U",["~$unknown-keys",["^16",["~$seq",["^16",["~$set/difference",["^16",["^6J","~$m","~$keys","^W"]],"~$mandatory-interceptor-keys"]]]]],["^16",["^11","~:error","re-frame: ->interceptor","~$m","has unknown keys:","^74"]]]]]],["^ ","~:id",["^16",["~$or","^70","~:unnamed"]],"~:before","^71","~:after","^72"]]]],"^5S",true,"^65",[["^ ","^5T",0,"^5S",true,"^66","~$cljs.core/IMap"]],"^7",17,"^68","^67","^9",17,"^5U",0,"^69",true,"^5M",["^16",[["~$&",["^ ","^19","~$m","^6[",["^70","^71","^72"]]]]],"^6=","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",49,"^8",7,"^9",49,"^:",19,"^5M",["^16",["^5N",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]]]],"^5R",["^ ","^5S",false,"^5T",3,"^5U",3,"^5V",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]],"^5M",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]],"^5W",["^16",[null,null,null]]]],"^K","^2@","^6","re_frame/interceptor.cljc","^:",19,"^5R",["^ ","^5S",false,"^5T",3,"^5U",3,"^5V",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]],"^5M",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]],"^5W",["^16",[null,null,null]]],"^5V",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]],"^5X",null,"^5T",3,"^5W",["^16",[null,null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^7@",["^16",[["^5O"],["^16",["^6R","^5O"]]]],["^16",[["^5O","^5P"],["^16",["^6Y","^5O",["^6R","^5P"]]]]],["^16",[["^5O","^5P","^6X"],["^16",["^6Y","^5O",["^6R","^5P"],"^6X"]]]]]]],"^5S",false,"^65",[["^ ","^5T",1,"^5S",false,"^66","^67"],["^ ","^5T",2,"^5S",false,"^66",["^J",[null,"^67"]]],["^ ","^5T",3,"^5S",false,"^66",["^J",[null,"^67"]]]],"^7",49,"^9",49,"^5U",3,"^69",true,"^5M",["^16",[["^5O"],["^5O","^5P"],["^5O","^5P","^6X"]]]],"~$execute",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",149,"^8",7,"^9",149,"^:",14,"^5M",["^16",["^5N",["^16",[["~$event-v","~$interceptors"]]]]],"^6=","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^K","^1P","^6","re_frame/interceptor.cljc","^:",14,"^5V",["^16",[["^7B","^7C"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^7A","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.",["^7B","^7C"],["^16",["~$trace/merge-trace!",["^ ","~:tags",["^ ","~:interceptors","^7C"]]]],["^16",["^6J",["^16",["^5O","^7B","^7C"]],["^16",["^6:","^7="]],"~$change-direction",["^16",["^6:","^7>"]]]]]]],"^5S",false,"^7",149,"^68","^67","^9",149,"^5U",2,"^69",true,"^5M",["^16",["^5N",["^16",[["^7B","^7C"]]]]],"^6=","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",39,"^8",7,"^9",39,"^:",19,"^5M",["^16",["^5N",["^16",[["^5O","^5P","^6P"]]]]]],"^K","^2B","^6","re_frame/interceptor.cljc","^:",19,"^5V",["^16",[["^5O","^5P","^6P"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^7H",["^5O","^5P","^6P"],["^16",["^6Q","^5O",["^64","^5P"],"^6P"]]]]],"^5S",false,"^7",39,"^68",["^J",["^6S","^67"]],"^9",39,"^5U",3,"^69",true,"^5M",["^16",["^5N",["^16",[["^5O","^5P","^6P"]]]]]],"~$enqueue",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",112,"^8",7,"^9",112,"^:",14,"^5M",["^16",["^5N",["^16",[["^5O","^7C"]]]]],"^6=","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^K","^20","^6","re_frame/interceptor.cljc","^:",14,"^5V",["^16",[["^5O","^7C"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^7I","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.",["^5O","^7C"],["^16",["~$update","^5O","^6B",["^16",["~$fnil","~$into","^12"]],"^7C"]]]]],"^5S",false,"^7",112,"^68",["^J",["^6S","^67"]],"^9",112,"^5U",2,"^69",true,"^5M",["^16",["^5N",["^16",[["^5O","^7C"]]]]],"^6=","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^78",["^ ","^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^K","^2L","^6","re_frame/interceptor.cljc","^:",32,"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["~$def","^78",["^J",["^7>","^7:","^7="]]]]],"^7",9,"^9",9,"^66","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5M",["^16",["^5N",["^16",[["~$m"]]]]]],"^K","^2C","^6","re_frame/interceptor.cljc","^:",19,"^5V",["^16",[["~$m"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^61","^7O",["~$m"],["^16",["~$and",["^16",["~$map?","~$m"]],["^16",["~$=","^78",["^16",["^6J","~$m","^77","^W"]]]]]]]]],"^5S",false,"^7",11,"^68","~$boolean","^9",11,"^5U",1,"^69",true,"^5M",["^16",["^5N",["^16",[["~$m"]]]]]],"^7G",["^ ","^5L",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",135,"^8",8,"^9",135,"^:",24,"^6;",true,"^5M",["^16",["^5N",["^16",[["^5O"]]]]],"^6=","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6;",true,"^K","^2=","^6","re_frame/interceptor.cljc","^:",24,"^5V",["^16",[["^5O"]]],"^5X",null,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^6>","^7G","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`",["^5O"],["^16",["^6J","^5O",["^16",["~$dissoc","^6B"]],["^16",["^7I",["^16",["^6H","^5O"]]]]]]]]],"^5S",false,"^7",135,"^68",["^J",["^6S","^67"]],"^9",135,"^5U",1,"^69",true,"^5M",["^16",["^5N",["^16",[["^5O"]]]]],"^6=","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5O",["^ ","^5L",null,"^5",["^ ","^6;",true,"^6","re_frame/interceptor.cljc","^:",15,"^5R",["^ ","^5S",false,"^5T",3,"^5U",3,"^5V",[["~$event","^7C"],["^7T","^7C","~$db"]],"^5M",["^16",[["^7T","^7C"],["^7T","^7C","^7U"]]],"^5W",["^16",[null,null]]],"^8",8,"^7",124,"^9",124,"^5M",["^16",["^5N",["^16",[["^7T","^7C"],["^7T","^7C","^7U"]]]]],"^6=","Create a fresh context"],"^6;",true,"^K","^1L","^6","re_frame/interceptor.cljc","^:",15,"^5R",["^ ","^5S",false,"^5T",3,"^5U",3,"^5V",[["^7T","^7C"],["^7T","^7C","^7U"]],"^5M",["^16",[["^7T","^7C"],["^7T","^7C","^7U"]]],"^5W",["^16",[null,null]]],"^5V",[["^7T","^7C"],["^7T","^7C","^7U"]],"^5X",null,"^5T",3,"^5W",["^16",[null,null]],"^8",1,"^5Y",["^ ","^5Z","^5[","^60",["^16",["^6>","^5O","Create a fresh context",["^16",[["^7T","^7C"],["^16",["^6J",["^ "],["^16",["^6O","~:event","^7T"]],["^16",["^7I","^7C"]]]]]],["^16",[["^7T","^7C","^7U"],["^16",["^6J",["^16",["^5O","^7T","^7C"]],["^16",["^6O","~:db","^7U"]]]]]]]]],"^5S",false,"^65",[["^ ","^5T",2,"^5S",false,"^66",["^J",["^6S","^67"]]],["^ ","^5T",3,"^5S",false,"^66",["^J",["^6S","^67"]]]],"^7",124,"^9",124,"^5U",3,"^69",true,"^5M",["^16",[["^7T","^7C"],["^7T","^7C","^7U"]]],"^6=","Create a fresh context"]],"^14",["^ ","^T","^T","^U","^T","^X","^X"],"~:cljs.analyzer/constants",["^ ","^Z",["^J",["^7<","^7E","^7W","^6B","^7V","^7>","^7:","^64","^6H","^79","^6R","^7F","^7="]],"~:order",["^7>","^7:","^7=","^79","^7<","^64","^6R","^6B","^6H","^7V","^7W","^7E","^7F"]],"^1;",["^ ","^[",["^J",[]]],"^1<",["^ "],"^1=",["^Y","^X","^R","^S","^T","^V"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2N",[["^80","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^80","~:shadow-tweaks"],null,["^80","~:source-map-inline"],null,["^80","~:elide-asserts"],false,["^80","~:optimize-constants"],null,["^80","^1B"],null,["^80","~:external-config"],null,["^80","~:tooling-config"],null,["^80","~:emit-constants"],null,["^80","~:load-tests"],null,["^80","~:form-size-threshold"],null,["^80","~:global-goog-object&array"],null,["^80","~:data-readers"],null,["^80","~:infer-externs"],"~:auto",["^80","^1D"],null,["^82","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^80","~:fn-invoke-direct"],null,["^80","~:source-map"],"/dev/null"]]]