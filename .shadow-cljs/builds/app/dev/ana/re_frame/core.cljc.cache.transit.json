["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\r\nre_frame.core.dispatch = re_frame.router.dispatch;\r\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\r\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\r\nre_frame.core.subscribe = re_frame.subs.subscribe;\r\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\r\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\r\n/**\r\n * This is a low level, advanced function.  You should probably be\r\n *   using reg-sub instead.\r\n *   Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\r\n */\r\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\r\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\r\n});\r\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\r\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\r\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\r\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\r\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (db event) -> db\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of this\r\n * chain.\r\n */\r\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\r\nvar G__26332 = arguments.length;\r\nswitch (G__26332) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n}));\r\n\r\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\r\n}));\r\n\r\n(re_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of the\r\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\r\n * and, later, action effects.\r\n */\r\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\r\nvar G__26334 = arguments.length;\r\nswitch (G__26334) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n}));\r\n\r\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\r\n}));\r\n\r\n(re_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (context-map event-vector) -> context-map\r\n * \r\n *   This form of registration is almost never used. \r\n */\r\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\r\nvar G__26336 = arguments.length;\r\nswitch (G__26336) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n}));\r\n\r\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\r\n}));\r\n\r\n(re_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\r\nre_frame.core.debug = re_frame.std_interceptors.debug;\r\nre_frame.core.path = re_frame.std_interceptors.path;\r\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\r\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\r\nre_frame.core.after = re_frame.std_interceptors.after;\r\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\r\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\r\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\r\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\r\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\r\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\r\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\r\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\r\nre_frame.core.console = re_frame.loggers.console;\r\n/**\r\n * Checkpoints the state of re-frame and returns a function which, when\r\n *   later called, will restore re-frame to that checkpointed state.\r\n * \r\n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\r\n *   \r\n */\r\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\r\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\r\nvar app_db = cljs.core.deref(re_frame.db.app_db);\r\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\r\nreturn (function (){\r\nvar original_subs_26358 = cljs.core.set(cljs.core.vals(subs_cache));\r\nvar current_subs_26359 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\r\nvar seq__26337_26360 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_26359,original_subs_26358));\r\nvar chunk__26338_26361 = null;\r\nvar count__26339_26362 = (0);\r\nvar i__26340_26363 = (0);\r\nwhile(true){\r\nif((i__26340_26363 < count__26339_26362)){\r\nvar sub_26364 = chunk__26338_26361.cljs$core$IIndexed$_nth$arity$2(null,i__26340_26363);\r\nre_frame.interop.dispose_BANG_(sub_26364);\r\n\r\n\r\nvar G__26365 = seq__26337_26360;\r\nvar G__26366 = chunk__26338_26361;\r\nvar G__26367 = count__26339_26362;\r\nvar G__26368 = (i__26340_26363 + (1));\r\nseq__26337_26360 = G__26365;\r\nchunk__26338_26361 = G__26366;\r\ncount__26339_26362 = G__26367;\r\ni__26340_26363 = G__26368;\r\ncontinue;\r\n} else {\r\nvar temp__5804__auto___26369 = cljs.core.seq(seq__26337_26360);\r\nif(temp__5804__auto___26369){\r\nvar seq__26337_26370__$1 = temp__5804__auto___26369;\r\nif(cljs.core.chunked_seq_QMARK_(seq__26337_26370__$1)){\r\nvar c__5568__auto___26371 = cljs.core.chunk_first(seq__26337_26370__$1);\r\nvar G__26372 = cljs.core.chunk_rest(seq__26337_26370__$1);\r\nvar G__26373 = c__5568__auto___26371;\r\nvar G__26374 = cljs.core.count(c__5568__auto___26371);\r\nvar G__26375 = (0);\r\nseq__26337_26360 = G__26372;\r\nchunk__26338_26361 = G__26373;\r\ncount__26339_26362 = G__26374;\r\ni__26340_26363 = G__26375;\r\ncontinue;\r\n} else {\r\nvar sub_26376 = cljs.core.first(seq__26337_26370__$1);\r\nre_frame.interop.dispose_BANG_(sub_26376);\r\n\r\n\r\nvar G__26377 = cljs.core.next(seq__26337_26370__$1);\r\nvar G__26378 = null;\r\nvar G__26379 = (0);\r\nvar G__26380 = (0);\r\nseq__26337_26360 = G__26377;\r\nchunk__26338_26361 = G__26378;\r\ncount__26339_26362 = G__26379;\r\ni__26340_26363 = G__26380;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\r\n\r\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\r\n\r\nreturn null;\r\n});\r\n});\r\n/**\r\n * Remove all events queued for processing\r\n */\r\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null);\r\n});\r\n/**\r\n * Registers a function `f` to be called after each event is processed\r\n * `f` will be called with two arguments:\r\n *  - `event`: a vector. The event just processed.\r\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\r\n * \r\n * This is useful in advanced cases like:\r\n *   - you are implementing a complex bootstrap pipeline\r\n *   - you want to create your own handling infrastructure, with perhaps multiple\r\n *     handlers for the one event, etc.  Hook in here.\r\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\r\n * \r\n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\r\n *   be used at \"remove time\" to get rid of the right callback.\r\n *   \r\n */\r\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\r\nvar G__26342 = arguments.length;\r\nswitch (G__26342) {\r\ncase 1:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\r\n}));\r\n\r\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\r\n}));\r\n\r\n(re_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2);\r\n\r\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\r\n});\r\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___26382 = arguments.length;\r\nvar i__5770__auto___26383 = (0);\r\nwhile(true){\r\nif((i__5770__auto___26383 < len__5769__auto___26382)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___26383]));\r\n\r\nvar G__26384 = (i__5770__auto___26383 + (1));\r\ni__5770__auto___26383 = G__26384;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__26344_26385 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__26345_26386 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\r\nvar G__26346_26387 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\r\nvar G__26347_26388 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__26344_26385,G__26345_26386,G__26346_26387,G__26347_26388) : re_frame.core.console.call(null,G__26344_26385,G__26345_26386,G__26346_26387,G__26347_26388));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\r\n}));\r\n\r\n(re_frame.core.register_handler.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.core.register_handler.cljs$lang$applyTo = (function (seq26343){\r\nvar self__5755__auto__ = this;\r\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq26343));\r\n}));\r\n\r\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___26389 = arguments.length;\r\nvar i__5770__auto___26390 = (0);\r\nwhile(true){\r\nif((i__5770__auto___26390 < len__5769__auto___26389)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___26390]));\r\n\r\nvar G__26391 = (i__5770__auto___26390 + (1));\r\ni__5770__auto___26390 = G__26391;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__26351_26392 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__26352_26393 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\r\nvar G__26353_26394 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\r\nvar G__26354_26395 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__26351_26392,G__26352_26393,G__26353_26394,G__26354_26395) : re_frame.core.console.call(null,G__26351_26392,G__26352_26393,G__26353_26394,G__26354_26395));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\r\n}));\r\n\r\n(re_frame.core.register_sub.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.core.register_sub.cljs$lang$applyTo = (function (seq26348){\r\nvar self__5755__auto__ = this;\r\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq26348));\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^R","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^Y","~$fx","~$re-frame.fx","~$re-frame.events","^10","~$loggers","~$re-frame.loggers","^[","^[","~$re-frame.registrar","^13","~$cljs.core","^14","~$interceptor","^Y","~$goog","^16","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^13","^18","^18","^V","^V","~$events","^10","~$re-frame.std-interceptors","^1=","^12","^12","^T","^T","~$interop","^R","~$std-interceptors","^1=","^X","^X","^1:","^1:"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^1=","~$fx-handler->interceptor","^1=","~$ctx-handler->interceptor","^1="],"~:require-macros",["^ ","^14","^14"],"~:form",["~#list",["~$ns","^L",["^1H",["^1A",["^10","~:as","^1<"],["^T","^1J","^S"],["^R","^1J","^1>"],["^1:","^1J","^19"],["^[","^1J","^Z"],["^X","^1J","^W"],["^18","^1J","^17"],["^12","^1J","^11"],["^13","^1J","^1;"],["^Y","^1J","^15"],["^1=","^1J","^1?","~:refer",["^1C","^1D","^1E"]],["^V","^1J","^U"]]]]],"~:flags",["^ ","^1A",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^16","^14","^10","^T","^R","^1:","^[","^X","^18","^12","^13","^Y","^1=","^V"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1703059270019,"^M",["^ ","^R","^R","^S","^T","^U","^V","^W","^X","^Y","^Y","^Z","^[","^10","^10","^11","^12","^[","^[","^13","^13","^14","^14","^15","^Y","^16","^16","^17","^18","^19","^1:","^1;","^13","^18","^18","^V","^V","^1<","^10","^1=","^1=","^12","^12","^T","^T","^1>","^R","^1?","^1=","^X","^X","^1:","^1:"],"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","re-frame.router/dispatch","re-frame.core/dispatch-sync","re-frame.router/dispatch-sync","re-frame.core/reg-sub","re-frame.subs/reg-sub","re-frame.core/subscribe","re-frame.subs/subscribe","re-frame.core/clear-sub","cljs.core.partial","re-frame.registrar/clear-handlers","re-frame.subs/kind","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","query-id","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","re-frame.fx/reg-fx","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","re-frame.core/inject-cofx","re-frame.cofx/inject-cofx","re-frame.core/clear-cofx","re-frame.cofx/kind","var_args","G__26332","re-frame.core/reg-event-db","js/Error","id","handler","re_frame.core.reg_event_db","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/db-handler->interceptor","G__26334","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx","re-frame.std-interceptors/fx-handler->interceptor","G__26336","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx","re-frame.std-interceptors/ctx-handler->interceptor","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__26337","cljs.core/seq","chunk__26338","count__26339","i__26340","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__26342","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback","re-frame.core/remove-post-event-callback","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.core/register-handler","seq26343","self__5755__auto__","args","G__26344","G__26345","G__26346","G__26347","cljs.core.apply","re-frame.core/register-sub","seq26348","G__26351","G__26352","G__26353","G__26354"]],"~:used-vars",["^J",["~$re-frame.router/purge","~$re-frame.core/add-post-event-callback","~$re-frame.core/remove-post-event-callback","~$re-frame.interceptor/get-effect","~$re-frame.fx/kind","~$re-frame.core/clear-sub","~$re-frame.fx/reg-fx","~$re-frame.db/app-db","~$re-frame.core/clear-event","~$re-frame.core/register-sub","~$re-frame.core/assoc-coeffect","~$re-frame.fx/do-fx","~$re-frame.interop/dispose!","~$cljs.core/partial","~$re-frame.loggers/set-loggers!","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.core/dispatch","~$re-frame.interceptor/->interceptor","~$re-frame.core/on-changes","~$cljs.core/count","~$cljs.core/deref","~$re-frame.events/register","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$re-frame.events/kind","~$re-frame.core/enrich","~$re-frame.registrar/clear-handlers","~$re-frame.loggers/console","~$re-frame.core/get-coeffect","~$re-frame.core/assoc-effect","~$cljs.core/chunk-rest","~$re-frame.std-interceptors/trim-v","~$re-frame.core/reg-event-db","~$cljs.core/set","~$re-frame.core/reg-sub-raw","~$re-frame.core/dispatch-sync","~$re-frame.interceptor/enqueue","~$re-frame.core/subscribe","~$re-frame.std-interceptors/db-handler->interceptor","~$re-frame.core/trim-v","~$cljs.core/reset!","~$re-frame.registrar/register-handler","~$re-frame.subs/clear-subscription-cache!","~$re-frame.subs/kind","~$re-frame.core/reg-fx","~$re-frame.core/purge-event-queue","~$re-frame.core/get-effect","~$cljs.core/vals","~$re-frame.std-interceptors/enrich","~$re-frame.subs/subscribe","~$re-frame.core/clear-cofx","~$re-frame.core/reg-event-ctx","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/-nth","~$re-frame.core/reg-event-fx","~$re-frame.interceptor/assoc-coeffect","~$re-frame.core/clear-fx","~$re-frame.cofx/reg-cofx","~$clojure.set/difference","~$re-frame.cofx/inject-cofx","~$re-frame.std-interceptors/fx-handler->interceptor","~$re-frame.subs/reg-sub","~$re-frame.cofx/kind","~$re-frame.core/register-handler","~$re-frame.router/dispatch-sync","~$re-frame.std-interceptors/after","~$re-frame.router/add-post-event-callback","~$re-frame.core/->interceptor","~$re-frame.core/inject-cofx","~$cljs.core/next","~$re-frame.core/set-loggers!","~$re-frame.interceptor/get-coeffect","~$re-frame.subs/query->reaction","~$re-frame.core/make-restore-fn","~$re-frame.interceptor/assoc-effect","~$re-frame.core/clear-subscription-cache!","~$re-frame.core/reg-sub","~$re-frame.cofx/inject-db","~$re-frame.router/event-queue","~$re-frame.std-interceptors/path","~$re-frame.core/console","~$re-frame.router/remove-post-event-callback","~$re-frame.core/reg-cofx","~$re-frame.router/dispatch","~$cljs.core/first","~$re-frame.core/path","~$re-frame.core/enqueue","~$re-frame.core/debug","~$js/Error","~$re-frame.std-interceptors/on-changes","~$re-frame.registrar/kind->id->handler","~$cljs.core/chunked-seq?","~$re-frame.core/after"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1P","reagent/impl/batching.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1P","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.dom.HtmlElement"]]],["^1P","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1P","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.asserts"]]],["^1P","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4G","^4H","^4K","^4F","^4I","^4J"]]],["^1P","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4F"]]],["^1P","re_frame/loggers.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^V"]]],["^1P","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K"]]],["^1P","reagent/impl/util.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^4A","^4B","^4D"]]],["^1P","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4G","~$goog.reflect","^4F"]]],["^1P","re_frame/router.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^10","^R","^12","~$re-frame.trace"]]],["^49","node_modules/fbjs/lib/emptyFunction.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","e4c24d86bdc1d3fdfdea4bcd8ad79ede5d045fb0","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^1P","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","re_frame/registrar.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^R","^12"]]],["^49","node_modules/fbjs/lib/emptyObject.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","3b34d3f45a149b2a8016477c9ffbe011103fd779","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^1P","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4G","^4F"]]],["^49","node_modules/scheduler/cjs/scheduler.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","f683a524b03498a1510e8212cb7ad7992728f04a","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^1P","reagent/ratom.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^4C","^4A","~$reagent.impl.batching","^V"]]],["^49","node_modules/scheduler/cjs/scheduler.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","9472969a489f23335a05beb90573f81a73239194","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^1P","re_frame/interop.cljs"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1P","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^49","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","d1e7bb5f7c53667de84b51d7535a959d16b917a5","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^49","node_modules/create-react-class/factory.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","464107f78fd09f8f8b23b79e2c02b43d86966f60","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^49","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1P","shadow/js.js"],["ab6b31649cb03e352369698781207db4f6da6d5f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","reagent/impl/template.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^C","^4D","~$clojure.walk","^4C","~$reagent.impl.component","^4U","^4X","^4B","^4A"]]],["^1P","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K"]]],["^49","node_modules/react-dom/cjs/react-dom.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","94bb474c079e06a407e4fa922e58d3c69ee2b649","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","^C","^4Y","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1703058451000,1703058451000,1664859296000],["^49","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","754b7a48941975257c8955f6d5e511cb3a878737","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","^4Y"]]],["^1P","re_frame/events.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^1:","~$re-frame.utils","^R","^13","^12","^Y","^4T"]]],["^1P","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","^4S"]]],["^1P","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","~$goog.fs.blob","^4L","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4N","^4O"]]],["^1P","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^49","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","12fb110a42ab39177d6ab3e0a205e4a8ef350ae2","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^49","node_modules/fbjs/lib/warning.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","1a9dceee8d9dbda2fffdba852c8b22f247dd139d","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1P","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4N","~$goog.html.SafeUrl","^4O","^4K","^4F"]]],["^1P","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^59","~$goog.html.SafeStyle","^5<","^4M","~$goog.html.uncheckedconversions","^4N","^4F"]]],["^1P","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.dom.TagName","^4K","~$goog.dom.element"]]],["^1P","reagent/impl/component.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^E","^C","^4C","^4U","^4X","^4B","^4A"]]],["^1P","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14"]]],["^1P","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4N","^59","^5A","~$goog.html.SafeStyleSheet","^5<","^5C","^4M","^4O","^4K","^4P","~$goog.array","~$goog.object","^4F","~$goog.dom.tags","^5:"]]],["^1P","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5G"]]],["^1P","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^49","node_modules/scheduler/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","408126fc2241739168bcaf5965ae56a7df143144","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1P","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5F","^4F","^4G"]]],["^1P","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5F","^4K","^5=","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^5C","~$goog.dom.safe","^5@","^5B","~$goog.math.Coordinate","~$goog.math.Size","^5G","~$goog.string","^4N","~$goog.string.Unicode","~$goog.userAgent"]]],["^1P","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.debug.Error","^5L"]]],["^1P","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5F","^4K","~$goog.collections.maps","^5P","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1P","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4H"]]],["^1P","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^49","node_modules/object-assign/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","519ffd5a4c91b67302cc9947b794966d629860cd","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^1P","re_frame/db.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^R"]]],["^1P","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",[]]],["^1P","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5F","^5G"]]],["^1P","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^5P","~$goog.string.StringBuffer"]]],["^49","node_modules/create-react-class/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","a7020dbd19046ce80d5d792de4a772ebcb222749","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","^C","~$module$node_modules$create_react_class$factory"]]],["^1P","re_frame/cofx.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^1:","^Y","^13","^12"]]],["^49","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","0a81b45abe33f0ad39b726512604018f94261db9","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","^4Y"]]],["^1P","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K"]]],["^1P","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5M","^5B","^4N","^4F"]]],["^1P","re_frame/interceptor.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^12","^R","^4T","^V"]]],["^1P","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^V"]]],["^1P","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4F","^4J"]]],["^1P","reagent/core.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^C","~$reagent.impl.template","^54","^4C","^4U","^4X","^4A","^4B","~$reagent.dom"]]],["^1P","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.math"]]],["^1P","re_frame/std_interceptors.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^Y","^12","^13","^1:","~$clojure.data","^X","^57","^4T"]]],["^1P","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.flags"]]],["^1P","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.debug.entryPointRegistry","~$goog.dom","^5C","^5?","^4P","^4Q"]]],["^1P","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5L","^5C"]]],["^1P","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","^5@","^59","^5A","^5E","^5<","^4M","^4N","^4F"]]],["^1P","re_frame/utils.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^12"]]],["^1P","reagent/dom.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^G","^4C","^5[","^4U","^4X","^4A","^4B"]]],["^1P","re_frame/fx.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^18","^1:","^Y","^R","^10","^13","^12","^4T"]]],["^1P","reagent/interop.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14"]]],["^1P","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16"]]],["^1P","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","~$goog.math.Long","~$goog.math.Integer","^5P","^5G","^5F","~$goog.Uri","^5Y"]]],["^1P","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4N","^4O","^5:","^4K"]]],["^1P","reagent/debug.cljs"],["417ad50ab1583aeb00751336948481695582950e","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14"]]],["^1P","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4N","^5A","^4O","^5G","^4K","^4F"]]],["^1P","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4S"]]],["^1P","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^5R"]]],["^49","node_modules/scheduler/tracing.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^49","node_modules/react-dom/cjs/react-dom.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","9e0e7f2f8475431f2b4b8c517c6fabc2273c7857","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>","^C","^4Y","^55","~$module$node_modules$scheduler$tracing"]]],["^1P","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14"]]],["^1P","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","^5P"]]],["^1P","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^4K","^4O"]]],["^49","node_modules/fbjs/lib/invariant.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","7d121fba069c08ef259e463d2d624b3c89f21d43","81766ad77bd9ea6a67c23a47aadd9acd4fe8d105","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^4>"]]],["^1P","re_frame/trace.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^R","^12","^5?"]]],["^1P","re_frame/subs.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^1:","^R","^12","^57","^13","^4T"]]],["^1P","re_frame/core.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^4:",["^ ","^4;",null,"^4<",["^J",[]],"^4=",["^16","^14","^10","^T","^R","^1:","^[","^X","^18","^12","^13","^Y","^1=","^V"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/re-frame/re-frame/0.10.8/re-frame-0.10.8.jar!/re_frame/trace.cljc",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/re-frame/re-frame/0.10.8/re-frame-0.10.8.jar!/re_frame/interop.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1650239977000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1656281882000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^T","^U","^V","^W","^X","^Y","^Y","^Z","^[","^10","^10","^11","^12","^[","^[","^13","^13","^14","^14","^15","^Y","^16","^16","^17","^18","^19","^1:","^1;","^13","^18","^18","^V","^V","^1<","^10","^1=","^1=","^12","^12","^T","^T","^1>","^R","^1?","^1=","^X","^X","^1:","^1:"],"^1@",["^J",["^1A"]],"~:shadow/js-access-global",["^J",["Error"]],"^1B",["^ ","^1C","^1=","^1D","^1=","^1E","^1="],"~:defs",["^ ","~$console",["^ ","^K","^3V","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13],"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^1H",["~$def","^78","~$loggers/console"]]]],"~$on-changes",["^ ","^K","^2C","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^7?","~$std-interceptors/on-changes"]]]],"~$enrich",["^ ","^K","^2K","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^7A","~$std-interceptors/enrich"]]]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1H",["~$quote",["^1H",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^K","^2T","^6","re_frame/core.cljc","^:",18,"~:method-params",["^1H",[["^7G","^7H"]]],"~:protocol-impl",null,"~:arglists-meta",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["~$defn","^7C","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md",["^7G","^7H"],["^1H",["~$registrar/register-handler","~$subs/kind","^7G","^7H"]]]]],"~:variadic?",false,"^7",51,"~:ret-tag","~$any","^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^7E",["^1H",["^7F",["^1H",[["^7G","^7H"]]]]],"^7I","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^K","^2W","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^7U","~$subs/subscribe"]]]],"~$assoc-coeffect",["^ ","^K","^2:","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^7W","~$interceptor/assoc-coeffect"]]]],"~$register-sub",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^7E",["^1H",["^7F",["^1H",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^7P",true,"~:fixed-arity",0,"^7S",0,"^7J",[["^1H",["^7Z"]]],"^7E",["^1H",[["~$&","^7Z"]]],"^7L",["^1H",[null]]]],"^K","^29","^6","re_frame/core.cljc","^:",19,"^7[",["^ ","^7P",true,"^80",0,"^7S",0,"^7J",[["^1H",["^7Z"]]],"^7E",["^1H",[["~$&","^7Z"]]],"^7L",["^1H",[null]]],"^7J",[["^1H",["^7Z"]]],"^7K",null,"^80",0,"^7L",["^1H",[null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^7Y",["~$&","^7Z"],["^1H",["^78","~:warn","re-frame:  \"register-sub\" is deprecated. Use \"reg-sub-raw\" (look for registration of",["^1H",["~$str",["^1H",["~$first","^7Z"]]]],")"]],["^1H",["~$apply","^7C","^7Z"]]]]],"^7P",true,"~:methods",[["^ ","^80",0,"^7P",true,"~:tag","^7R"]],"^7",234,"^7Q","^7R","^9",234,"^7S",0,"^7T",true,"^7E",["^1H",[["~$&","^7Z"]]]],"~$purge-event-queue",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^7E",["^1H",["^7F",["^1H",[[]]]]],"^7I","Remove all events queued for processing"],"^K","^33","^6","re_frame/core.cljc","^:",24,"^7J",["^1H",[[]]],"^7K",null,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^87","Remove all events queued for processing",[],["^1H",["~$router/purge","^3T"]]]]],"^7P",false,"^7",194,"^7Q","^7R","^9",194,"^7S",0,"^7T",true,"^7E",["^1H",["^7F",["^1H",[[]]]]],"^7I","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^7E",["^1H",["^7F",["^1H",[["~$id"]]]]]],"^K","^22","^6","re_frame/core.cljc","^:",33,"^7J",["^1H",[["^8:"]]],"^7K",null,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^89",["^8:"],["^1H",["~$router/remove-post-event-callback","^3T","^8:"]]]]],"^7P",false,"^7",222,"^7Q","^7R","^9",222,"^7S",1,"^7T",true,"^7E",["^1H",["^7F",["^1H",[["^8:"]]]]]],"~$path",["^ ","^K","^3[","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^8<","~$std-interceptors/path"]]]],"~$reg-sub",["^ ","^K","^3R","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^8>","~$subs/reg-sub"]]]],"~$make-restore-fn",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^7E",["^1H",["^7F",["^1H",[[]]]]],"^7I","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^K","^3O","^6","re_frame/core.cljc","^:",22,"^7J",["^1H",[[]]],"^7K",null,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^8@","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  ",[],["^1H",["~$let",["~$handlers",["^1H",["~$clojure.core/deref","~$registrar/kind->id->handler"]],"~$app-db",["^1H",["^8C","~$db/app-db"]],"~$subs-cache",["^1H",["^8C","~$subs/query->reaction"]]],["^1H",["~$fn",[],["^1H",["^8A",["~$original-subs",["^1H",["^U",["^1H",["~$vals","^8G"]]]],"~$current-subs",["^1H",["^U",["^1H",["^8K",["^1H",["^8C","^8H"]]]]]]],["^1H",["~$doseq",["~$sub",["^1H",["~$set/difference","^8L","^8J"]]],["^1H",["~$interop/dispose!","^8N"]]]]]],["^1H",["~$reset!","^8D","^8B"]],["^1H",["^8Q","^8F","^8E"]],null]]]]]]],"^7P",false,"^7",169,"^7Q","~$function","^9",169,"^7S",0,"^7T",true,"^7E",["^1H",["^7F",["^1H",[[]]]]],"^7I","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"^K","^3>","^6","re_frame/core.cljc","^:",14,"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^8S",["^1H",["~$partial","~$registrar/clear-handlers","~$fx/kind"]]]]],"^7",61,"^9",61,"^86","^8R"],"~$get-effect",["^ ","^K","^34","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^8W","~$interceptor/get-effect"]]]],"~$reg-event-db",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^7E",["^1H",["^7F",["^1H",[["^8:","~$handler"],["^8:","~$interceptors","^8Z"]]]]],"^7I","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^7[",["^ ","^7P",false,"^80",3,"^7S",3,"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7L",["^1H",[null,null]]]],"^K","^2R","^6","re_frame/core.cljc","^:",19,"^7[",["^ ","^7P",false,"^80",3,"^7S",3,"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7L",["^1H",[null,null]]],"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7K",null,"^80",3,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^8Y","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.",["^1H",[["^8:","^8Z"],["^1H",["^8Y","^8:",null,"^8Z"]]]],["^1H",[["^8:","^8[","^8Z"],["^1H",["~$events/register","^8:",["~$cofx/inject-db","~$fx/do-fx","^8[",["^1H",["^1C","^8Z"]]]]]]]]]],"^7P",false,"^85",[["^ ","^80",2,"^7P",false,"^86","^7R"],["^ ","^80",3,"^7P",false,"^86","^7R"]],"^7",71,"^9",71,"^7S",3,"^7T",true,"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7I","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^K","^2U","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^93","~$router/dispatch-sync"]]]],"~$clear-event",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^K","^28","^6","re_frame/core.cljc","^:",17,"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^95",["^1H",["^8T","^8U","~$events/kind"]]]]],"^7",116,"^9",116,"^86","^8R"],"~$->interceptor",["^ ","^K","^3I","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^97","~$interceptor/->interceptor"]]]],"~$set-loggers!",["^ ","^K","^3L","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^99","~$loggers/set-loggers!"]]]],"~$inject-cofx",["^ ","^K","^3J","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9;","~$cofx/inject-cofx"]]]],"~$get-coeffect",["^ ","^K","^2N","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9=","~$interceptor/get-coeffect"]]]],"~$debug",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^K","^41","^6","re_frame/core.cljc","^:",11,"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9?","~$std-interceptors/debug"]]],"^7",122,"^9",122,"^86","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^K","^2O","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9B","~$interceptor/assoc-effect"]]]],"~$enqueue",["^ ","^K","^40","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9D","~$interceptor/enqueue"]]]],"~$clear-cofx",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^K","^38","^6","re_frame/core.cljc","^:",16,"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9F",["^1H",["^8T","^8U","~$cofx/kind"]]]]],"^7",66,"^9",66,"^86","^8R"],"~$reg-event-ctx",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^7E",["^1H",["^7F",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]]]],"^7I","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^7[",["^ ","^7P",false,"^80",3,"^7S",3,"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7L",["^1H",[null,null]]]],"^K","^39","^6","re_frame/core.cljc","^:",20,"^7[",["^ ","^7P",false,"^80",3,"^7S",3,"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7L",["^1H",[null,null]]],"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7K",null,"^80",3,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^9H","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ",["^1H",[["^8:","^8Z"],["^1H",["^9H","^8:",null,"^8Z"]]]],["^1H",[["^8:","^8[","^8Z"],["^1H",["^90","^8:",["^91","^92","^8[",["^1H",["^1E","^8Z"]]]]]]]]]],"^7P",false,"^85",[["^ ","^80",2,"^7P",false,"^86","^7R"],["^ ","^80",3,"^7P",false,"^86","^7R"]],"^7",104,"^9",104,"^7S",3,"^7T",true,"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7I","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^K","^32","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9I","~$fx/reg-fx"]]]],"~$trim-v",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^K","^2Y","^6","re_frame/core.cljc","^:",12,"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9K","~$std-interceptors/trim-v"]]],"^7",125,"^9",125,"^86","^9A"],"~$clear-sub",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^K","^25","^6","re_frame/core.cljc","^:",15,"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9M",["^1H",["^8T","^8U","^7O"]]]]],"^7",48,"^9",48,"^86","^8R"],"~$dispatch",["^ ","^K","^2A","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9N","~$router/dispatch"]]]],"~$after",["^ ","^K","^46","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9P","~$std-interceptors/after"]]]],"~$add-post-event-callback",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^7E",["^1H",["^7F",["^1H",[["~$f"],["^8:","~$f"]]]]],"^7I","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^7[",["^ ","^7P",false,"^80",2,"^7S",2,"^7J",[["~$f"],["^8:","~$f"]],"^7E",["^1H",[["~$f"],["^8:","~$f"]]],"^7L",["^1H",[null,null]]]],"^K","^21","^6","re_frame/core.cljc","^:",30,"^7[",["^ ","^7P",false,"^80",2,"^7S",2,"^7J",[["~$f"],["^8:","~$f"]],"^7E",["^1H",[["~$f"],["^8:","~$f"]]],"^7L",["^1H",[null,null]]],"^7J",[["~$f"],["^8:","~$f"]],"^7K",null,"^80",2,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^9R","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ",["^1H",[["~$f"],["^1H",["^9R","~$f","~$f"]]]],["^1H",[["^8:","~$f"],["^1H",["~$router/add-post-event-callback","^3T","^8:","~$f"]]]]]]],"^7P",false,"^85",[["^ ","^80",1,"^7P",false,"^86","^7R"],["^ ","^80",2,"^7P",false,"^86","^7R"]],"^7",201,"^9",201,"^7S",2,"^7T",true,"^7E",["^1H",[["~$f"],["^8:","~$f"]]],"^7I","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^K","^3X","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9T","~$cofx/reg-cofx"]]]],"~$reg-event-fx",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^7E",["^1H",["^7F",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]]]],"^7I","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^7[",["^ ","^7P",false,"^80",3,"^7S",3,"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7L",["^1H",[null,null]]]],"^K","^3<","^6","re_frame/core.cljc","^:",19,"^7[",["^ ","^7P",false,"^80",3,"^7S",3,"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7L",["^1H",[null,null]]],"^7J",[["^8:","^8Z"],["^8:","^8[","^8Z"]],"^7K",null,"^80",3,"^7L",["^1H",[null,null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^9V","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.",["^1H",[["^8:","^8Z"],["^1H",["^9V","^8:",null,"^8Z"]]]],["^1H",[["^8:","^8[","^8Z"],["^1H",["^90","^8:",["^91","^92","^8[",["^1H",["^1D","^8Z"]]]]]]]]]],"^7P",false,"^85",[["^ ","^80",2,"^7P",false,"^86","^7R"],["^ ","^80",3,"^7P",false,"^86","^7R"]],"^7",87,"^9",87,"^7S",3,"^7T",true,"^7E",["^1H",[["^8:","^8Z"],["^8:","^8[","^8Z"]]],"^7I","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^7D",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^7E",["^1H",["^7F",["^1H",[["~$&","^7Z"]]]]],"^7[",["^ ","^7P",true,"^80",0,"^7S",0,"^7J",[["^1H",["^7Z"]]],"^7E",["^1H",[["~$&","^7Z"]]],"^7L",["^1H",[null]]]],"^K","^3E","^6","re_frame/core.cljc","^:",23,"^7[",["^ ","^7P",true,"^80",0,"^7S",0,"^7J",[["^1H",["^7Z"]]],"^7E",["^1H",[["~$&","^7Z"]]],"^7L",["^1H",[null]]],"^7J",[["^1H",["^7Z"]]],"^7K",null,"^80",0,"^7L",["^1H",[null]],"^8",1,"^79",["^ ","^7:","^7;","^7<",["^1H",["^7M","^9W",["~$&","^7Z"],["^1H",["^78","^81","re-frame:  \"register-handler\" has been renamed \"reg-event-db\" (look for registration of",["^1H",["^82",["^1H",["^83","^7Z"]]]],")"]],["^1H",["^84","^8Y","^7Z"]]]]],"^7P",true,"^85",[["^ ","^80",0,"^7P",true,"^86","^7R"]],"^7",229,"^7Q","^7R","^9",229,"^7S",0,"^7T",true,"^7E",["^1H",[["~$&","^7Z"]]]],"~$clear-subscription-cache!",["^ ","^K","^3Q","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31],"^79",["^ ","^7:","^7;","^7<",["^1H",["^7=","^9X","~$subs/clear-subscription-cache!"]]]]],"^1F",["^ ","^14","^14"],"~:cljs.analyzer/constants",["^ ","^1@",["^J",["^81"]],"~:order",["^81"]],"^1L",["^ ","^1A",["^J",[]]],"^1M",["^ "],"^1N",["^16","^14","^10","^T","^R","^1:","^[","^X","^18","^12","^13","^Y","^1=","^V"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^48",[["^:2","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^:2","~:shadow-tweaks"],null,["^:2","~:source-map-inline"],null,["^:2","~:elide-asserts"],false,["^:2","~:optimize-constants"],null,["^:2","^1S"],null,["^:2","~:external-config"],null,["^:2","~:tooling-config"],null,["^:2","~:emit-constants"],null,["^:2","~:load-tests"],null,["^:2","~:form-size-threshold"],null,["^:2","~:global-goog-object&array"],null,["^:2","~:data-readers"],null,["^:2","~:infer-externs"],"~:auto",["^:2","^1U"],null,["^:4","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:2","~:fn-invoke-direct"],null,["^:2","~:source-map"],"/dev/null"]]]