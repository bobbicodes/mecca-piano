["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\r\n/**\r\n * Holds the current set of logging functions.\r\n * By default, re-frame uses the functions provided by js/console.\r\n * Use `set-loggers!` to change these defaults\r\n *   \r\n */\r\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\r\nreturn cljs.core.List.EMPTY;\r\n}))], null));\r\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___25243 = arguments.length;\r\nvar i__5770__auto___25244 = (0);\r\nwhile(true){\r\nif((i__5770__auto___25244 < len__5769__auto___25243)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___25244]));\r\n\r\nvar G__25245 = (i__5770__auto___25244 + (1));\r\ni__5770__auto___25244 = G__25245;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\r\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\r\n}\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__25241 = cljs.core.deref(re_frame.loggers.loggers);\r\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__25241) : level.call(null,G__25241));\r\n})(),args);\r\n}));\r\n\r\n(re_frame.loggers.console.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_frame.loggers.console.cljs$lang$applyTo = (function (seq25239){\r\nvar G__25240 = cljs.core.first(seq25239);\r\nvar seq25239__$1 = cljs.core.next(seq25239);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__25240,seq25239__$1);\r\n}));\r\n\r\n/**\r\n * Change the set (or a subset) of logging functions used by re-frame.\r\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\r\n */\r\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\r\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\r\n}\r\n\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\r\n});\r\n/**\r\n * Get the current logging functions used by re-frame.\r\n */\r\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\r\nreturn cljs.core.deref(re_frame.loggers.loggers);\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^R","~$cljs.core","^S","~$goog","^T"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$difference","^R"],"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^L",["^[",["^V",["^R","~:refer",["^X"]]]]]],"~:flags",["^ ","^V",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^R"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1703059269383,"^M",["^ ","^R","^R","^S","^S","^T","^T"],"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAaA;;;;;;AAAeA,2BAKb,6CAAA,2CAAA,8EAAA,gFAAA,mFAAA,8IAAA,vdAACC,4IAA0B,AAACC,iBAAsBC,8DACvB,AAACC,kBAAsBD,gEACvB,AAACE,mBAAsBF,+DACvB,kBAAI,AAASA,eACX,AAACG,mBAAsBH,SACvB,AAACD,iBAAsBC,uEACzB,mEAAA,jDAAI,AAAYA,kBACd,AAACI,sBAAyBJ;AAD5B,AAAA;;AAU7B,AAAA,2BAAA,mCAAAK,9DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,gEAAA,hEAAME,2EACHM,MAAQC;AADX,AAEE,GAAQ,0BAAA,AAAAE,1BAACC,0CAAWxB,0BAAQoB;AAA5B;AAAA,AAAA,MAAA,KAAAE,MAAA,CAAA,4HAAA,KAAA,/GAAmC,CAAA,wFAAiDF;;;AACpF,OAACK,8CAAM,iBAAAC,WAAA,AAAAH,gBAAQvB;AAAR,AAAA,kFAAA0B,4BAAAA,tGAACN,sCAAAA,gDAAAA;KAAgBC;;;AAH1B,CAAA,mDAAA,nDAAMP;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAMA;;;;qCAAA,rCAAMY,kFAGHC;AAHH,AAIE,GAAS,AAACC,uBAAO,AAACC,qDAAW,AAACC,cAAI,AAACC,eAAKJ,cAAc,cAAA,eAAA,AAAAL,gBAAKvB,/BAAQgC,dAAKD;AAAxE;AAAA,AAAA,MAAA,KAAAT,MAAA,CAAA,kBAAA,8BAAA,KAAA;;;AACA,OAACW,mDAAMjC,yBAAQkC,gBAAMN;;AAEvB;;;+BAAA,/BAAMO;AAAN,AAAA,OAAAZ,gBAGGvB","names",["re-frame.loggers/loggers","cljs.core.atom","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq25239","G__25240","cljs.core/first","cljs.core/next","self__5754__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply","G__25241","re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/merge","re-frame.loggers/get-loggers"]],"~:used-vars",["^J",["~$cljs.core/keys","~$re-frame.loggers/set-loggers!","~$cljs.core/IndexedSeq","~$cljs.core/deref","~$js/console.group.bind","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/atom","~$js/console","~$cljs.core/set","~$cljs.core/empty?","~$js/console.warn.bind","~$cljs.core/contains?","~$js/console.error.bind","~$cljs.core/swap!","~$js/console.groupEnd.bind","~$clojure.set/difference","~$cljs.core/next","~$js/console.log.bind","~$cljs.core/first","~$cljs.core/merge","~$re-frame.loggers/loggers","~$js/Error","~$re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["^16","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^16","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^16","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^28"]]],["^16","re_frame/loggers.cljc"],["2eb06c3612cba6ec0744f49988e5da81a11edab4","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^S","^R"]]],["^16","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27"]]],["^16","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^25","^28"]]],["^16","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27"]]],"~:SHADOW-TIMESTAMP",[1703058451000,1703058451000,1664859296000],["^16","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","~$goog.reflect"]]],["^16","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","~$goog.fs.blob","^2;","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2=","^2>"]]],["^16","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2=","~$goog.html.SafeUrl","^2>","^27","^28"]]],["^16","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2B","~$goog.html.SafeStyle","^2D","^2<","~$goog.html.uncheckedconversions","^2=","^28"]]],["^16","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","~$goog.dom.TagName","^27","~$goog.dom.element"]]],["^16","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2=","^2B","^2I","~$goog.html.SafeStyleSheet","^2D","^2K","^2<","^2>","^27","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^28","~$goog.dom.tags","^2C"]]],["^16","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2P"]]],["^16","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^16","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2O","^27","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^16","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^26"]]],["^16","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",[]]],["^16","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2O","^2P"]]],["^16","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","~$goog.dom.safe","^2J","^2=","^28"]]],["^16","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^28","^2:"]]],["^16","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","~$goog.flags"]]],["^16","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2S","^2K"]]],["^16","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","^2H","^2B","^2I","^2M","^2D","^2<","^2=","^28"]]],["^16","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T"]]],["^16","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","~$goog.math.Long","~$goog.math.Integer","^2U","^2P","^2O","~$goog.Uri","~$goog.string.StringBuffer"]]],["^16","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2=","^2>","^2C","^27"]]],["^16","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2=","^2I","^2>","^2P","^27","^28"]]],["^16","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^2@"]]],["^16","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^S"]]],["^16","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","^2U"]]],["^16","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^20",["^ ","^21",null,"^22",["^J",[]],"^23",["^T","^27","^2>"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1656281882000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1664859296000,"jar:file:/C:/Users/porko/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1656281882000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^S","^T","^T"],"^U",["^J",["^V"]],"~:shadow/js-access-global",["^J",["Error"]],"^W",["^ ","^X","^R"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^3V",true,"^K","^1W","^6","re_frame/loggers.cljc","^:",23,"^8",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^[",["~$def","^3U","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  ",["^[",["~$atom",["^ ","~:log",["^[",["^1T","^1J"]],"~:warn",["^[",["^1M","^1J"]],"~:error",["^[",["^1O","^1J"]],"~:group",["^[",["~$if",["^[",["~$.-group","^1J"]],["^[",["^1F","^1J"]],["^[",["^1T","^1J"]]]],"~:groupEnd",["^[",["^45",["^[",["~$.-groupEnd","^1J"]],["^[",["^1Q","^1J"]],["^[",["~$fn*",[],["^[",[]]]]]]]]]]]],"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^[",["~$quote",["^[",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^[",["^4A","^4B"]]],"^4?",["^[",[["^4A","~$&","^4B"]]],"~:arglists-meta",["^[",[null]]]],"^K","^1H","^6","re_frame/loggers.cljc","^:",14,"^4C",["^ ","^4D",true,"^4E",1,"^4F",1,"^4G",[["^[",["^4A","^4B"]]],"^4?",["^[",[["^4A","~$&","^4B"]]],"^4H",["^[",[null]]],"^4G",[["^[",["^4A","^4B"]]],"~:protocol-impl",null,"^4E",1,"^4H",["^[",[null]],"^8",1,"^3W",["^ ","^3X","^3Y","^3Z",["^[",["~$defn","^4=",["^4A","~$&","^4B"],["^[",["~$assert",["^[",["~$contains?",["^[",["~$clojure.core/deref","^3U"]],"^4A"]],["^[",["~$str","re-frame: log called with unknown level: ","^4A"]]]],["^[",["~$apply",["^[",["^4A",["^[",["^4M","^3U"]]]],"^4B"]]]]],"^4D",true,"~:methods",[["^ ","^4E",1,"^4D",true,"^4:","~$any"]],"^7",35,"~:ret-tag","^4Q","^9",35,"^4F",1,"~:fn-var",true,"^4?",["^[",[["^4A","~$&","^4B"]]]],"~$set-loggers!",["^ ","^4>",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^4?",["^[",["^4@",["^[",[["~$new-loggers"]]]]],"^4<","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^K","^1C","^6","re_frame/loggers.cljc","^:",19,"^4G",["^[",[["^4U"]]],"^4I",null,"^4H",["^[",[null,null]],"^8",1,"^3W",["^ ","^3X","^3Y","^3Z",["^[",["^4J","^4T","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)",["^4U"],["^[",["^4K",["^[",["~$empty?",["^[",["^X",["^[",["~$set",["^[",["~$keys","^4U"]]]],["^[",["~$->",["^[",["^4M","^3U"]],"^4X","^4W"]]]]]],"Unknown keys in new-loggers"]],["^[",["~$swap!","^3U","~$merge","^4U"]]]]],"^4D",false,"^7",41,"^4R",["^J",[null,"^4Q"]],"^9",41,"^4F",1,"^4S",true,"^4?",["^[",["^4@",["^[",[["^4U"]]]]],"^4<","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^4>",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^4?",["^[",["^4@",["^[",[[]]]]],"^4<","Get the current logging functions used by re-frame."],"^K","^1Y","^6","re_frame/loggers.cljc","^:",18,"^4G",["^[",[[]]],"^4I",null,"^4H",["^[",[null,null]],"^8",1,"^3W",["^ ","^3X","^3Y","^3Z",["^[",["^4J","^50","Get the current logging functions used by re-frame.",[],["^[",["^4M","^3U"]]]]],"^4D",false,"^7",48,"^4R","^4Q","^9",48,"^4F",0,"^4S",true,"^4?",["^[",["^4@",["^[",[[]]]]],"^4<","Get the current logging functions used by re-frame."]],"^Y",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^J",["^44","^42","^43","^47","^41"]],"~:order",["^41","^42","^43","^44","^47"]],"^12",["^ ","^V",["^J",[]]],"^13",["^ "],"^14",["^T","^S","^R"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^1[",[["^55","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^55","~:shadow-tweaks"],null,["^55","~:source-map-inline"],null,["^55","~:elide-asserts"],false,["^55","~:optimize-constants"],null,["^55","^19"],null,["^55","~:external-config"],null,["^55","~:tooling-config"],null,["^55","~:emit-constants"],null,["^55","~:load-tests"],null,["^55","~:form-size-threshold"],null,["^55","~:global-goog-object&array"],null,["^55","~:data-readers"],null,["^55","~:infer-externs"],"~:auto",["^55","^1;"],null,["^57","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^55","~:fn-invoke-direct"],null,["^55","~:source-map"],"/dev/null"]]]