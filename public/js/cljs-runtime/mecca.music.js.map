{"version":3,"sources":["mecca/music.cljs"],"mappings":"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","names":["mecca.music/audio-context","js/window.AudioContext.","js/window.AudioContext","js/window.webkitAudioContext","js/mecca","js/mecca.music","js/mecca.music.audiocontext","mecca.music/audiocontext","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","mecca.music/current-time","context","mecca.music/lookahead","mecca.music/scheduleAheadTime","mecca.music/scheduler","next-note-time","G__42236","re-frame.core/subscribe","current-note","G__42237","tempo","G__42238","cljs.core/deref","G__42239","re-frame.core/dispatch","G__42240","mecca.music/mmbass-minor-triad","time","root","mecca.music/mmbass-major-triad","mecca.music/mm8","pitch","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","iter__4582__auto__","s__42242","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__42244","cljs.core/chunk-buffer","i__42243","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42241","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","beat","cljs.core.range.cljs$core$IFn$_invoke$arity$3","mecca.music/mmbass","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","mecca.music/mario-jump?","G__42246","notes","G__42247","jump","G__42248","and__4174__auto__","G__42251","p1__42245#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__42252","mecca.music/song-done?","G__42255","playing?","G__42256","now","length","cljs.core/max","p1__42253#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","started","G__42258","elapsed","beat-length","G__42259","current-beat","last-drawn-pos","G__42260","G__42261","G__42262","G__42263","mecca.music/dispatch-timer-event","G__42264","js/mecca.music.do-timer","mecca.music/do-timer","js/setInterval","mecca.music/load-sound","named-url","out","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","req","js/XMLHttpRequest","e","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","mecca.music/decode","decoded-buffer","js/console","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","mecca.music/buffer-source","buffer","source","mecca.music/get-and-decode","c__35254__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__35255__auto__","switch__35184__auto__","state_42277","state_val_42278","inst_42266","cljs.core.async.impl.ioc-helpers/take!","inst_42268","statearr-42279","statearr-42280","statearr-42281","inst_42270","statearr-42282","inst_42275","cljs.core.async.impl.ioc-helpers/return-chan","inst_42272","statearr-42283","statearr-42284","state-machine__35185__auto__","ret-value__35186__auto__","result__35187__auto__","cljs.core/keyword-identical?","e42285","js/Object","ex__35188__auto__","statearr-42286","cljs.core.async.impl.ioc-helpers/process-exception","state__35256__auto__","statearr-42287","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","mecca.music/load-samples","state_42316","state_val_42317","inst_42288","cljs.core/PersistentHashMap","inst_42289","inst_42290","inst_42291","statearr-42318","statearr-42319","inst_42293","inst_42294","inst_42295","cljs.core/not","statearr-42320","statearr-42321","inst_42314","inst_42297","inst_42298","inst_42299","inst_42300","inst_42301","inst_42302","statearr-42322","statearr-42323","inst_42312","statearr-42324","inst_42304","inst_42305","inst_42306","inst_42307","inst_42308","statearr-42325","statearr-42326","statearr-42327","e42328","statearr-42329","statearr-42330","cljs.core.range.cljs$core$IFn$_invoke$arity$2","js/mecca.music.loading-samples","mecca.music/loading-samples","state_42337","state_val_42338","inst_42331","inst_42333","inst_42334","inst_42335","statearr-42343","statearr-42344","e42345","statearr-42346","statearr-42347","mecca.music/samples","mecca.music/pitch->rate","midi-num","G__42354","js/Error","mecca.music/play-sample","instrument","audio-buffer","cljs.core.get.cljs$core$IFn$_invoke$arity$2","sample-source","compressor","analyser","gain","G__42355","mecca.music/play-at","G__42357","mecca.music/play-song!","G__42358","G__42359","G__42360","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","s__42362","b__42364","i__42363","map__42365","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","iter__42361","map__42368","mecca.music/get-bytes!","freq-data","cljs.core/chunk-first"],"sourcesContent":["(ns ^:figwheel-hooks mecca.music\n  (:require\n   [cljs.core.async :refer [<! timeout chan put! close!]]\n   [reagent.core :as r]\n   [re-frame.core :as rf :refer [subscribe dispatch]])\n  (:require-macros\n   [cljs.core.async.macros :refer [go go-loop]]))\n\n(defn ^:export audio-context []\n  (if js/window.AudioContext.\n    (js/window.AudioContext.)\n    (js/window.webkitAudioContext.)))\n\n(defonce audiocontext (r/atom (audio-context)))\n\n(defn ^:export current-time [context]\n  (.-currentTime context))\n\n(def lookahead 25.0)\n\n(def scheduleAheadTime 0.1)\n\n(defn scheduler []\n  (let [next-note-time (subscribe [:next-note-time])\n        current-note (subscribe [:current-note])\n        tempo (subscribe [:tempo])\n        ]\n    (if (< @next-note-time\n         (+ scheduleAheadTime\n            (current-time @audiocontext)))\n      (dispatch [:schedule-note @current-note @next-note-time])\n      (dispatch [:next-note]))))\n\n\n(defn mmbass-minor-triad [time root]\n  [{:time time :instrument 15, :pitch root}\n   {:time (+ time 1.5) :instrument 15, :pitch root}\n   {:time (+ time 2) :instrument 15, :pitch (+ root 3)}\n   {:time (+ time 3) :instrument 15, :pitch (+ root 7)}\n   {:time (+ time 4.5) :instrument 15, :pitch root}\n   {:time (+ time 5) :instrument 15, :pitch root}\n   {:time (+ time 5.5) :instrument 15, :pitch root}\n   {:time (+ time 6) :instrument 15, :pitch (+ root 3)}\n   {:time (+ time 7) :instrument 15, :pitch (+ root 7)}])\n\n(defn mmbass-major-triad [time root]\n  [{:time time :instrument 15, :pitch root}\n   {:time (+ time 1.5) :instrument 15, :pitch root}\n   {:time (+ time 2) :instrument 15, :pitch (+ root 4)}\n   {:time (+ time 3) :instrument 15, :pitch (+ root 7)}\n   {:time (+ time 4.5) :instrument 15, :pitch root}\n   {:time (+ time 5) :instrument 15, :pitch root}\n   {:time (+ time 5.5) :instrument 15, :pitch root}\n   {:time (+ time 6) :instrument 15, :pitch (+ root 4)}\n   {:time (+ time 7) :instrument 15, :pitch (+ root 7)}])\n\n(defn mm8 [time pitch]\n  (apply concat\n   (for [beat (range 0 8 2)]\n     (mmbass-minor-triad (+ beat time) pitch))))\n\n(defn mmbass []\n  (concat\n   (mmbass-minor-triad 0 64)\n   (mmbass-major-triad 8 60)\n   (mmbass-major-triad 16 62)\n   (mmbass-minor-triad 24 64)))\n\n(defn mario-jump? []\n  (let [beat (subscribe [:current-position])\n        notes (subscribe [:notes])\n        jump (subscribe [:mario-jump])]\n    (when (and @(subscribe [:playing?])\n           (zero? @jump))\n      (if (< 0 (count (filter #(= (:time %) (inc @beat))\n                              @notes)))\n      (dispatch [:jump!])))))\n\n(defn song-done? []\n  (let [notes (subscribe [:notes])\n        playing? @(subscribe [:playing?])\n        now (.-currentTime @audiocontext)\n        length (apply max (map #(:time %) @notes))\n        started (subscribe [:play-start])\n        elapsed (- (current-time @audiocontext) @started)\n        beat-length (/ 60 @(subscribe [:tempo]))\n        current-beat (/ elapsed beat-length)\n        last-drawn-pos (subscribe [:current-position])]\n    (when playing?\n      (if (< length current-beat)\n        (dispatch [:play-off])\n        (if (< @last-drawn-pos current-beat)\n          (do (dispatch [:move-mario])\n            (dispatch [:advance-position])))))\n    (mario-jump?)))\n\n(defn dispatch-timer-event []\n  (dispatch [:tick!])\n      (song-done?)\n  (scheduler))\n\n(defonce do-timer\n  (js/setInterval dispatch-timer-event 150))\n\n(defn load-sound [named-url]\n  (let [out (chan)\n        req (js/XMLHttpRequest.)]\n    (set! (.-responseType req) \"arraybuffer\")\n    (set! (.-onload req) (fn [e]\n                           (if (= (.-status req) 200)\n                             (do (put! out (assoc named-url :buffer (.-response req)))\n                                 (close! out))\n                             (close! out))))\n    (.open req \"GET\" (:url named-url) true)\n    (.send req)\n    out))\n\n(defn decode [named-url]\n  (let [out (chan)]\n    (if (:buffer named-url)\n      (do\n        (.decodeAudioData\n         @audiocontext (:buffer named-url)\n         (fn [decoded-buffer]\n           (put! out (assoc named-url :decoded-buffer decoded-buffer))\n           (close! out))\n         (fn []\n           (.error js/console \"Error loading file \" (prn named-url))\n           (close! out))))\n      (close! out))\n    out))\n\n(defn buffer-source [buffer]\n  (let [source (.createBufferSource @audiocontext)]\n    (set! (.-buffer source) buffer)\n    source))\n\n(defn get-and-decode [named-url]\n  (go\n    (when-let [s (<! (load-sound named-url))]\n      (<! (decode s)))))\n\n(defn load-samples []\n  (go-loop [result {}\n            sounds (range 1 34)]\n    (if-not (nil? (first sounds))\n      (let [sound (first sounds)                   ; for Github Pages - remove the '/mecca/resources/public' to run locally\n            decoded-buffer (<! (get-and-decode {:url (str \"/audio/\" sound \".mp3\")\n                                                :sound sound}))]\n        (prn sound)\n        (prn decoded-buffer)\n        (recur (assoc result sound decoded-buffer)\n               (rest sounds)))\n      result)))\n\n(defonce loading-samples\n  (go\n    (def samples (<! (load-samples)))\n    (prn \"Samples loaded\")))\n\n(defn pitch->rate [midi-num]\n  (case midi-num\n    55 0.5\n    56 0.5297315471796479\n    57 0.5612310241546867\n    58 0.5946035575013607\n    59 0.6299605249474368\n    60 0.6674199270850174\n    61 0.7071067811865477\n    62 0.7491535384383409\n    63 0.7937005259840998\n    64 0.8408964152537146\n    65 0.8908987181403394\n    66 0.9438743126816935\n    67 1\n    68 1.0594630943592953\n    69 1.122462048309373\n    70 1.1892071150027212\n    71 1.2599210498948734\n    72 1.3348398541700346\n    73 1.4142135623730954\n    74 1.498307076876682\n    75 1.5874010519682\n    76 1.6817928305074297\n    77 1.7817974362806792\n    78 1.8877486253633877\n    79 2\n    80 2.1189261887185906\n    81 2.244924096618746\n    82 2.3784142300054425\n    83 2.519842099789747))\n\n(defn play-sample [instrument pitch]\n  (let [context audiocontext\n        now (.-currentTime @context)\n        audio-buffer (:decoded-buffer (get samples instrument))\n        sample-source (.createBufferSource @context)\n        compressor (.createDynamicsCompressor @context)\n        analyser (.createAnalyser @context)\n        gain (.createGain @context)\n        tempo (subscribe [:tempo])]\n    (set! (.-buffer sample-source) audio-buffer)\n    (.setValueAtTime\n     (.-playbackRate sample-source)\n     (pitch->rate pitch)\n     now)\n    (.connect sample-source gain)\n    (.connect gain (.-destination @context))\n    (.setValueAtTime (.-gain gain) 0 (+ (/ 60 @tempo ) now))\n    (.start sample-source)\n    sample-source))\n\n(defn play-at [instrument pitch time]\n  (let [context audiocontext\n        audio-buffer (:decoded-buffer (get samples instrument))\n        sample-source (.createBufferSource @context)\n        tempo (subscribe [:tempo])\n        gain (.createGain @context)]\n    (set! (.-buffer sample-source) audio-buffer)\n    (.setValueAtTime\n     (.-playbackRate sample-source) (pitch->rate (if (< 83 pitch)\n                                                   (- pitch 24)\n                                                   pitch))\n     time)\n    (.connect sample-source gain)\n    (.connect gain (.-destination @context))\n    (.setValueAtTime (.-gain gain) 1.0 time)\n    (.exponentialRampToValueAtTime\n     (.-gain gain)\n     0.01 (+ (/ 60 @tempo) time))\n    (.start sample-source time)\n    sample-source))\n\n(defn play-song! []\n  (let [notes (subscribe [:notes])\n        now (.-currentTime @audiocontext)\n        tempo (subscribe [:tempo])]\n    (dispatch [:reset-position])\n    (doall (for [{:keys [time instrument pitch]} @notes]\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\n\n(defn get-bytes! [analyser freq-data]\n  (.getByteFrequencyData analyser freq-data)\n  freq-data)\n"]}