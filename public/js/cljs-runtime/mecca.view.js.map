{"version":3,"sources":["mecca/view.cljs"],"mappings":";;;;;;;;;;;AAWA,AAAA,AAAMA;AAAN,AACE,AAAMC,AAAS,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAhB,AACE;AAAA,AACE,AAAA,AAAA,AAACC,AACK,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAw6EuC,AAAAuI,AAAA5I;AAx6EvCM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAACc,AACE,AAAA,AAACC,AAAI,AAAG,AAAA,AAAAC,AAAA,AAAM7B,AAAUyB,AAEhB,AAAA,AAAK,AAAA,AAAKA,AAAW,AAAA,AAAK,AAAA,AAAKA,AAIhC,AAAA,AAAK,AAAA,AAAKA,AAAW,AAAA,AAAK,AAAA,AAAKA;;AAR/C,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAACsB,AACE,AAAA,AAACC,AAAI,AAAG,AAAA,AAAAC,AAAA,AAAM7B,AAAUyB,AAEhB,AAAA,AAAK,AAAA,AAAKA,AAAW,AAAA,AAAK,AAAA,AAAKA,AAIhC,AAAA,AAAK,AAAA,AAAKA,AAAW,AAAA,AAAK,AAAA,AAAKA;;;AAR/C;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAW,AAAA,AAAA,AAAA,AAACsB;;;;AAcxB,AAAA,AAAMI;AAAN,AACE,AAAMC,AAAW,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9B,AAAAA,AAAAA;;AACZ+B,AAAQ,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChC,AAAAA,AAAAA;;AACTF,AAAS,AAAAmC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACjC,AAAAA,AAAAA;;AACVkC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnC,AAAAA,AAAAA;;AAHd,AAIE;AAAA,AACE,AAAA,AAAA,AAACC,AACK,AAAAC,AAAA,AAAAkC;AAAA,AAAA,AAAAhC,AAAA,AAAA;AAAA,AAAA,AAAAgC,AAAAA;;AAAA,AAAA,AAAA/B,AAAA,AAAAC,AAAA8B;AAAA,AAAA,AAAA/B;AAAA,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAA,AAAAe,AAAAiB,AAAMS;AAAN,AAAA,AAAAR,AAAA;AAAAC;AAAA,AAAA,AAAAnC,AAAA,AAAA;;AAAA,AAAA,AAAAmC,AAAAA;;AAAA,AAAA,AAAAlC,AAAA,AAAAC,AAAAiC;AAAA,AAAA,AAAAlC;AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAA,AAAAE,AAAAgC;AAAA,AAAA/B,AAm5EuC,AAAAuI,AAAAxG;AAn5EvC9B,AAAA,AAAAC,AAAAF;AAAAgC,AAAA,AAAA5B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAgC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAhC;AAAA,AAAA,AAAAK,AAAAN,AAAAiC,AACMM;AADN,AAAA,AAAA,AAAAhC,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKa,AAAA,AAAGO;;AALhB,AAsByB,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACD,AAAAA,AAAAA;;AAtB1B,AASgB,AAAA,AAAA,AAAI,AAAA,AAAA,AAAA1B,AAACF,AAAGqB,AAAKC,AAAQhB,AAcjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMyB;AAAN,AACE,AAAA,AAAA7B,AACG,AAAA8B,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzD,AAAAA,AAAAA;;AADJ;;AAAA,AAEG,AAAI,AAAA,AAAA,AAAC2D;;AACH,AAAAC,AAAA,AAAA,AAAwB,AAAGd,AAAK,AAAA,AAAAnB,AAAA,AAAM7B,AAC3B,AAACgE,AAAIN,AAAQT;AADxB,AAAA,AAAAa,AAAAA,AAACP,AAAAA,AAAAA;;;;AAHN,AAAA,AAAA1B,AAKG,AAAAoC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC/D,AAAAA,AAAAA;;AALJ;;AAAA,AAMG,AAAAiE,AAAA,AAAA,AAAyBnB;AAAzB,AAAA,AAAAmB,AAAAA,AAACZ,AAAAA,AAAAA;;;;AANJ,AAAA;;AAAA,AAQG,AAAAc,AAAA,AAAA,AAAA,AAAAxC,AAAsBE,AACX,AAAGiB,AAAK,AAAA,AAAAnB,AAAA,AAAM7B,AACd,AAACgE,AAAIN,AAAQT;AAFxB,AAAA,AAAAoB,AAAAA,AAACd,AAAAA,AAAAA;;;;;;AAhC1B,AAAA,AAWmB,AAAA,AAAA,AAAI,AAAA,AAAA,AAAA1B,AAACF,AAAGqB,AAAKC,AAAQhB;;AAXxC,AAa0B,AAAA,AAAAkB,AAAQ,AAAAC,AAAA,AAAAvB,AACEO;AADF,AAAA,AAAAgB;AAEC,AAAI,AAAA,AAACzB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB;;AAPRG;;;AAQN,AAAAC,AAAA,AAAA,AAAA,AAA+BL,AAAKC;AAApC,AAAA,AAAAI,AAAAA,AAACE,AAAAA,AAAAA;;AARH;;;AAb1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAEUP,AAAKC,AAEF,AAAA,AAAKD;;AAJlB,AAAA,AAAAL,AAAA;;;;AAAA;;;;;AAAA,AAAAzB,AAAA,AAAAC,AAAAuB,AAAA,AAAAE,AAAA,AAAAvB,AAAAoB;;AAAA,AAAAvB,AAAA,AAAAC,AAAAuB,AAAA;;;AAAA,AAAA,AAAApB,AAAAmB,AACMQ;AADN,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKa,AAAA,AAAG0B;;AALhB,AAsByB,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;AAtB1B,AASgB,AAAA,AAAA,AAAI,AAAA,AAAA,AAAA1B,AAACF,AAAGqB,AAAKC,AAAQhB,AAcjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMyB;AAAN,AACE,AAAA,AAAA7B,AACG,AAAA+B,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1D,AAAAA,AAAAA;;AADJ;;AAAA,AAEG,AAAI,AAAA,AAAA,AAAC2D;;AACH,AAAAE,AAAA,AAAA,AAAwB,AAAGf,AAAK,AAAA,AAAAnB,AAAA,AAAM7B,AAC3B,AAACgE,AAAIN,AAAQT;AADxB,AAAA,AAAAc,AAAAA,AAACR,AAAAA,AAAAA;;;;AAHN,AAAA,AAAA1B,AAKG,AAAAqC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChE,AAAAA,AAAAA;;AALJ;;AAAA,AAMG,AAAAkE,AAAA,AAAA,AAAyBpB;AAAzB,AAAA,AAAAoB,AAAAA,AAACb,AAAAA,AAAAA;;;;AANJ,AAAA;;AAAA,AAQG,AAAAe,AAAA,AAAA,AAAA,AAAAzC,AAAsBE,AACX,AAAGiB,AAAK,AAAA,AAAAnB,AAAA,AAAM7B,AACd,AAACgE,AAAIN,AAAQT;AAFxB,AAAA,AAAAqB,AAAAA,AAACf,AAAAA,AAAAA;;;;;;AAhC1B,AAAA,AAWmB,AAAA,AAAA,AAAI,AAAA,AAAA,AAAA1B,AAACF,AAAGqB,AAAKC,AAAQhB;;AAXxC,AAa0B,AAAA,AAAAkB,AAAQ,AAAAC,AAAA,AAAAvB,AACEO;AADF,AAAA,AAAAgB;AAEC,AAAI,AAAA,AAACzB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB,AACH,AAAA,AAACtB,AAAEsB;;AAPRG;;;AAQN,AAAAE,AAAA,AAAA,AAAA,AAA+BN,AAAKC;AAApC,AAAA,AAAAK,AAAAA,AAACC,AAAAA,AAAAA;;AARH;;;AAb1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAA,AAAApB,AAAAiB,AAEUO,AAAKC,AAEF,AAAA,AAAKD;;;AAJlB;;;;;AAAA,AAAA;;;AAAAH,AAAA,AAAArC,AAAA,AAAAgC,AACY,AAAA,AAACU;AADb,AAAA,AAAAL;AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAA,AAAAvB,AAAAc;;AAAA,AAAA,AAAAd,AAAAc;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAlC,AAAW,AAAA,AAAA,AAAA,AAACsB;;;;AAoCxB,AAAA,AAAM6C;AAAN,AACE,AAAMtC,AAAQ,AAAAuC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtE,AAAAA,AAAAA;;AACT6B,AAAW,AAAA0C,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvE,AAAAA,AAAAA;;AACZkC,AAAO,AAAAsC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxE,AAAAA,AAAAA;;AAFd,AAGK,AAAU,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAACF,AAAGM;AAAd;;AAAA,AACE,AAAM0C,AAAE,AAAA,AAAA9C,AAACP,AAAOW;AAAS2C,AAAE,AAAA,AAAA/C,AAACgD,AAAM5C;AAAlC,AAAA,AAAA,AAEG,AAAA,AAAAJ,AAAA,AAAKO,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC0C,AACU,AAAA,AAAM,AAAA,AAAMH,AAAI,AAAA,AAAM,AAAA,AAAMC,AACnD,AAAA,AAAA/C,AACG,AAAAkD,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7E,AAAAA,AAAAA;AADJ,AAAA,AAAA,AAAA,AAAA2B,AAEGmD,AAAqB,AAAA,AAAM,AAAA,AAAML,AAAI,AAAA,AAAG,AAAA,AAAKC,AAC7C,AAAAK,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC/E,AAAAA,AAAAA;AAHJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAIGgF,AAAmB,AAAA,AAAK,AAAA,AAAKP,AAE7BQ,AAAgB,AAAA,AAAM,AAAA,AAAMR,AAAI,AAAA,AAAG,AAAA,AAAMC;;;;AAExD,AAAA,AAAMQ;AAAN,AACG,AAAMC,AAAM,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpF,AAAAA,AAAAA;;AACPF,AAAS,AAAAuF,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACrF,AAAAA,AAAAA;;AADhB,AAEE,AAAA,AAAA,AAACC,AACK,AAAAC,AAAA,AAAAoF;AAAA,AAAA,AAAAlF,AAAA,AAAA;AAAA,AAAA,AAAAkF,AAAAA;;AAAA,AAAA,AAAAjF,AAAA,AAAAC,AAAAgF;AAAA,AAAA,AAAAjF;AAAA,AAAA,AAAAiF,AAAAjF;AAAA,AAAA,AAAA,AAAAE,AAAA+E;AAAA,AAAA9E,AA01EwC,AAAAuI,AAAAzD;AA11ExC7E,AAAA,AAAAC,AAAAF;AAAA+E,AAAA,AAAA3E,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA+E,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/E;AAAA,AAAAgF,AAAA,AAAA3E,AAAAN,AAAAgF;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA3B,AAAA2B,AAAA,AAAc3C;AAAd,AAAAgB,AAAA2B,AAAA,AAAmB5D;AAAnB,AAAAiC,AAAA2B,AAAA,AAA8B1C;AAA9B,AAAA,AACY,AAAA,AAAA,AAAI,AAAA,AAAApB,AAAA,AAAM7B,AAAUgD,AAAAA,AAAK,AAAA,AAAM,AAAA,AAAAnB,AAAA,AAAM7B;AADjD,AAAA,AAAAiB,AAAAwE,AAES,AACMd,AAAE,AAAG3B,AAAK,AAAA,AAAAnB,AAAA,AAAM7B;AAChBiG,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACO,AAAA,AAAChD;AAHzB,AAAA,AAAA,AAAA,AAKG,AAAA,AAAAC,AAAA,AAAQ,AAACa,AAAIiC,AAAUhD,AACtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC6B,AACU,AAAA,AAAM,AAAA,AAAMH,AAAI,AAAA,AAAM,AAAA,AAAM,AAACX,AAAIiC,AAAU,AAAA,AAAKhD,AAC5DkC,AAAgB,AAAA,AAAK,AAAA,AAAMR,AAAI,AAAG,AAAA,AAAK,AAAAwB,AAAI,AAACnC,AAAIiC,AAAUhD;AAAnB,AAAA,AAAAkD;AAAAA;;AAA0B,AAACnC,AAAIiC,AAAU,AAAA,AAAKhD;;AARxF,AAQkC;;;AAV3C,AAAA,AAAAyC,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAxE,AAAA,AAAAC,AAAAsE,AAAA,AAAAM,AAAA,AAAA1E,AAAAmE;;AAAA,AAAAtE,AAAA,AAAAC,AAAAsE,AAAA;;;AAAA,AAAAO,AAAA,AAAA1E,AAAAkE;AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAA,AAAAhC,AAAAgC,AAAA,AAAchD;AAAd,AAAAgB,AAAAgC,AAAA,AAAmBjE;AAAnB,AAAAiC,AAAAgC,AAAA,AAA8B/C;AAA9B,AAAA,AACY,AAAA,AAAA,AAAI,AAAA,AAAApB,AAAA,AAAM7B,AAAUgD,AAAAA,AAAK,AAAA,AAAM,AAAA,AAAAnB,AAAA,AAAM7B;AADjD,AAAAuB,AAES,AACMoD,AAAE,AAAG3B,AAAK,AAAA,AAAAnB,AAAA,AAAM7B;AAChBiG,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACO,AAAA,AAAChD;AAHzB,AAAA,AAAA,AAAA,AAKG,AAAA,AAAAC,AAAA,AAAQ,AAACa,AAAIiC,AAAUhD,AACtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC6B,AACU,AAAA,AAAM,AAAA,AAAMH,AAAI,AAAA,AAAM,AAAA,AAAM,AAACX,AAAIiC,AAAU,AAAA,AAAKhD,AAC5DkC,AAAgB,AAAA,AAAK,AAAA,AAAMR,AAAI,AAAG,AAAA,AAAK,AAAAwB,AAAI,AAACnC,AAAIiC,AAAUhD;AAAnB,AAAA,AAAAkD;AAAAA;;AAA0B,AAACnC,AAAIiC,AAAU,AAAA,AAAKhD;;AARxF,AAQkC;AAV3C,AAAA8C,AAAA,AAAAvE,AAAAgE;;AAAA,AAAA,AAAAhE,AAAAgE;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAApF,AAAA,AAAAyB,AAAuCwD;;;AAYlD,AAAA,AAAMe;AAAN,AACE,AAAMf,AAAM,AAAAgB,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnG,AAAAA,AAAAA;;AACP+B,AAAQ,AAAAqE,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpG,AAAAA,AAAAA;;AACTqG,AAAiB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtG,AAAAA,AAAAA;;AAClBF,AAAS,AAAAyG,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvG,AAAAA,AAAAA;;AACVwG,AAAW,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzG,AAAAA,AAAAA;;AACZ0G,AAAU,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3G,AAAAA,AAAAA;;AACX4G,AAAW,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7G,AAAAA,AAAAA;;AACZ6B,AAAW,AAAAiF,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9G,AAAAA,AAAAA;;AAPlB,AAQE;AAAA,AACE,AAAI,AAAA,AAAA,AAAA2B,AAACF,AAAMiF;AACT,AAAAK,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1D,AAAAA,AAAAA;;AADH;;AADF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKG,AAAA,AAAA,AAAA,AAACuB,AAAUoC,AACX,AAAA,AAAA,AAAA,AAACpC,AAAUoC,AACX,AAAA,AAAA,AAAA,AAACpC,AAAUqC,AACX,AAAA,AAAA,AAAA,AAACrC,AAAUsC,AACNC,AACHlC,AACF,AAAA,AAAA,AAAA,AAACL,AAAUwC,AAGTC,AACAC,AACA,AAAA,AAAA,AAAA,AAAC1C,AAAU2C,AACXC,AACA5F,AACA/B,AAEAqF,AACD,AAAA,AAAAvD,AAAK,AAAA8F,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzH,AAAAA,AAAAA;AAAN,AACGgF,AAAmB,AAAA,AAAK,AAAA,AAAA,AAAArD,AAAM,AAAA+F,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1H,AAAAA,AAAAA;AADlC,AAAA,AAAA;;;AAGR,AAAA,AAAM2H;AAAN,AAAA,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAAhG,AAAqB,AAAAiG,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5H,AAAAA,AAAAA;AAF9B,AAAA,AAGO,AAAA,AACN,AAAA,AAAA2B,AAAG,AAAA,AAAAA,AAAgBkG,AAAe,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9H,AAAAA,AAAAA;AAJpC,AAAA,AAAA,AAMA,AAAA,AAAA,AAACC,AACC,AAAAC,AAAA,AAAA6H;AAAA,AAAA,AAAA3H,AAAA,AAAA;AAAA,AAAA,AAAA2H,AAAAA;;AAAA,AAAA,AAAA1H,AAAA,AAAAC,AAAAyH;AAAA,AAAA,AAAA1H;AAAA,AAAA,AAAA0H,AAAA1H;AAAA,AAAA,AAAA,AAAAE,AAAAwH;AAAA,AAAAvH,AAqyEiD,AAAAuI,AAAAhB;AAryEjDtH,AAAA,AAAAC,AAAAF;AAAAwH,AAAA,AAAApH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAwH,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAxH;AAAA,AAAA,AAAAK,AAAAN,AAAAyH,AAAME;AAAN,AAAA,AAAA,AAAApH,AAAAiH,AACE,AAACK,AAAOF;;AADV,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAAjH,AAAA,AAAAC,AAAA+G,AAAA,AAAAE,AAAA,AAAA/G,AAAA4G;;AAAA,AAAA/G,AAAA,AAAAC,AAAA+G,AAAA;;;AAAA,AAAA,AAAA5G,AAAA2G,AAAMI;AAAN,AAAA,AAAA9G,AAAA,AAAA6G,AAAA,AAAA5G,AAAAyG,AACE,AAACM,AAAOF;;;AADV;;;;AAAA,AAAA;;AAAA,AAAA,AAAAjI,AAAA,AAAAyB,AAAY,AAAAyG,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpI,AAAAA,AAAAA;;AAPf,AAAA,AAUO,AAAA,AAAA,AAAA2B,AAAoB,AAAA2G,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtI,AAAAA,AAAAA;AAV5B,AAAA,AAYI,AAAMuI,AAAU,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxI,AAAAA,AAAAA;;AAAjB,AACE,AAAA,AAAA,AAAc,AAAA,AAAA2B,AAACP,AAAOmH,AAAsB,AAAA,AAAA5G,AAACgD,AAAM4D;AAbzD,AAAA,AAcO,AAAA,AAAA,AAAA5G,AAAgB,AAAA8G,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzI,AAAAA,AAAAA;AAdxB,AAAA,AAeO,AAAA,AAAA,AAAA2B,AAA2B,AAAA+G,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1I,AAAAA,AAAAA;AAfnC,AAAA,AAgBO,AAAA,AAAA,AAAA2B,AAA4B,AAAAgH,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3I,AAAAA,AAAAA;;;AAEpC,AAAA,AAAM4I;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEI1C,AACA2C,AACAC,AAaAnB","names":["mecca.view/note-guides","editor-x","G__45119","re-frame.core/subscribe","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__45121","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__45123","cljs.core/chunk-buffer","i__45122","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45120","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","beat","cljs.core.range.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/mod","cljs.core/deref","mecca.view/note-targets","instrument","G__45124","focused","G__45125","G__45126","sharp?","G__45127","s__45129","xs__6292__auto__","iterys__4578__auto__","s__45131","b__45133","i__45132","iter__45130","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__45128","time","pitch","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core/not","and__4174__auto__","G__45140","G__45147","re-frame.core/dispatch","G__45134","G__45141","pitches","G__45135","G__45142","mecca.music/play-sample","G__45136","G__45143","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__45137","G__45144","G__45138","G__45145","G__45139","G__45146","mecca.view/note-cursor","G__45148","G__45149","G__45150","x","y","cljs.core/last","mecca.editor.svg_paths.cljs$core$IFn$_invoke$arity$4","G__45151","mecca.editor/eraser-cursor","G__45152","mecca.editor/repeat-sign","mecca.editor/triforce","mecca.view/score-notes","notes","G__45153","G__45154","s__45156","b__45158","i__45157","map__45159","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","iter__45155","map__45161","pitch-map","cljs.core/zipmap","or__4185__auto__","mecca.view/editor","G__45163","G__45164","current-position","G__45165","G__45166","play-start","G__45167","mario-run","G__45168","mario-jump","G__45169","G__45170","G__45171","mecca.megaman/cloud1","mecca.megaman/airman","mecca.megaman/megaman1","mecca.editor/block","mecca.megaman/tile","mecca.notation/staff-lines","mecca.editor/retract-editor","mecca.editor/piano","mecca.editor/advance-editor","G__45172","G__45173","mecca.view/debug-info","G__45175","mecca.music/audiocontext","G__45177","s__45179","b__45181","i__45180","iter__45178","note","G__45182","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","G__45184","mouse-pos","G__45185","G__45187","G__45189","G__45191","mecca.view/mecca","mecca.transport/transport","mecca.editor/toolbar","cljs.core/chunk-first"],"sourcesContent":["(ns ^:figwheel-hooks mecca.view\n  (:require [mecca.music :as music :refer [audiocontext]]\n            [mecca.subs :as subs]\n            [reagent.core :as r]\n            [re-frame.core :as rf :refer [subscribe dispatch]]\n            [mecca.events :as events]\n            [mecca.notation :as notation]\n            [mecca.transport :as transport]\n            [mecca.editor :as editor :refer [svg-paths]]\n            [mecca.megaman :as megaman]))\n\n(defn note-guides []\n  (let [editor-x (subscribe [:editor-beat-start])]\n    (fn []\n      (into [:g]\n            (for [beat (range 0 9 0.5)]\n              (if (= 0\n                     (mod (+ (dec @editor-x) beat) 4))\n                [:g\n                 [:line {:x1 (+ 7 (* 6 beat)) :x2 (+ 7 (* 6 beat))\n                         :y1 6 :y2 31 :stroke \"orange\"\n                         :stroke-width 0.25\n                         :stroke-dasharray 0.5}]]\n                [:line {:x1 (+ 7 (* 6 beat)) :x2 (+ 7 (* 6 beat))\n                        :y1 6 :y2 31 :stroke \"black\"\n                        :stroke-width 0.075\n                        :stroke-dasharray 0.5}]))))))\n\n\n(defn note-targets []\n  (let [instrument (subscribe [:instrument])\n        focused (subscribe [:focused-note-pos])\n        editor-x (subscribe [:editor-beat-start])\n        sharp? (subscribe [:sharp?])]\n    (fn []\n      (into [:g]\n            (for [time (range 0 9 0.5)\n                  pitch (range 36)]\n              ^{:key [time pitch]}\n              [:rect {:transform \"translate(7,5)\"\n                      :x (* 6 time)\n                      :y (- pitch 1)\n                      :height 1 :width 3\n                      :stroke \"black\"\n                      :stroke-width 0.2\n                      :fill (if (= [time pitch] @focused) \"magenta\" \"gray\")\n                      :visibility \"visible\"\n                      :opacity (if (= [time pitch] @focused) 1 0.2)\n                      :pointer-events \"all\"\n                      :on-mouse-over #(if-not (and \n                                               @sharp?\n                                               (or (= pitch 12)\n                                                   (= pitch 15)\n                                                   (= pitch 8)\n                                                   (= pitch 5)\n                                                   (= pitch 1)\n                                                   (= pitch 0)))\n                                        (dispatch [:update-focus-note [time pitch]]))\n                      :on-mouse-out #(dispatch [:update-focus-note [nil nil]])\n                      :on-click (let [pitches [84 83 81 79 77 76 74 72 71 69 67 65 64 62 60 59 57 55]]\n                                  (cond\n                                    @(subscribe [:eraser?])\n                                    #(do (music/play-sample 18 63)\n                                       (dispatch [:remove-note (+ time (dec @editor-x))\n                                                  (get pitches pitch)]))\n                                    @(subscribe [:repeat?])\n                                    #(dispatch [:set-loop-end time])\n                                    :else\n                                    #(dispatch [:add-note @instrument\n                                                (+ time (dec @editor-x))\n                                                (get pitches pitch)])))}])))))\n\n(defn note-cursor []\n  (let [focused (subscribe [:focused-note-pos])\n        instrument (subscribe [:instrument])\n        sharp? (subscribe [:sharp?])]\n       (when-not (= @focused [nil nil])\n         (let [x (first @focused) y (last @focused)]\n           [:g\n            (if @sharp? (svg-paths [[\"black\" \"M15 46C15 47 14 47 13 47 13 47 12 47 12 46V37L7 39V49C7 49 6 50 6 50 5 50 5 49 5 49V40L3 40C3 40 2 40 2 40 2 40 1 40 1 39V35C1 35 1 34 2 34L5 33V23L3 24C3 24 2 24 2 24 2 24 1 23 1 23V19C1 19 1 18 2 18L5 17V7C5 6 5 6 6 6 6 6 7 6 7 7V16L12 14V4C12 4 13 3 13 3 14 3 15 4 15 4V13L17 13C17 12 17 12 17 12 18 12 18 13 18 14V17C18 18 18 18 17 19L15 20V30L17 29C17 29 17 29 17 29 18 29 18 29 18 30V34C18 34 18 35 17 35L15 36V46ZM7 22V32L12 31V21Z\"]]\n                                   (+ 68 (* 86 x)) (+ 18 (* 15 y)) 0.07))\n            (cond\n              @(subscribe [:eraser?])\n              [editor/eraser-cursor (+ 36 (* 30 x)) (+ (* 5 y) 20) 0.2]\n              @(subscribe [:repeat?])\n              [editor/repeat-sign (+ 7 (* 6 x)) 8 0.13]\n              :else\n              [editor/triforce (+ 32 (* 60 x)) (+ (* 10 y) 15) 0.2])]))))\n\n(defn score-notes []\n   (let [notes (subscribe [:notes])\n         editor-x (subscribe [:editor-beat-start])]\n     (into [:g]\n           (for [{:keys [time instrument pitch]} @notes\n                 :when (<= (dec @editor-x) time (+ 16 (dec @editor-x)))]\n                    ^{:key [instrument time pitch]}\n                    (let [x (- time (dec @editor-x))\n                          pitch-map (zipmap [84 83 81 79 77 76 74 72 71 69 67 65 64 62 60 59 57 55]\n                                            (range 18))]\n                      [:g\n                       (if-not (get pitch-map pitch)\n                        (svg-paths [[\"black\" \"M15 46C15 47 14 47 13 47 13 47 12 47 12 46V37L7 39V49C7 49 6 50 6 50 5 50 5 49 5 49V40L3 40C3 40 2 40 2 40 2 40 1 40 1 39V35C1 35 1 34 2 34L5 33V23L3 24C3 24 2 24 2 24 2 24 1 23 1 23V19C1 19 1 18 2 18L5 17V7C5 6 5 6 6 6 6 6 7 6 7 7V16L12 14V4C12 4 13 3 13 3 14 3 15 4 15 4V13L17 13C17 12 17 12 17 12 18 12 18 13 18 14V17C18 18 18 18 17 19L15 20V30L17 29C17 29 17 29 17 29 18 29 18 29 18 30V34C18 34 18 35 17 35L15 36V46ZM7 22V32L12 31V21Z\"]]\n                                   (+ 68 (* 86 x)) (+ 18 (* 15 (get pitch-map (dec pitch)))) 0.07))\n                      [editor/triforce (+ 2 (* 30 x)) (+ (* 5 (or (get pitch-map pitch) (get pitch-map (dec pitch)))) 9) 0.2]])))))\n\n(defn editor []\n  (let [notes (subscribe [:notes])\n        focused (subscribe [:focused-note-pos])\n        current-position (subscribe [:current-position])\n        editor-x (subscribe [:editor-beat-start])\n        play-start (subscribe [:play-start])\n        mario-run (subscribe [:mario-run])\n        mario-jump (subscribe [:mario-jump])\n        instrument (subscribe [:instrument])]\n    (fn []\n      (if (= 20 @mario-run)\n        (dispatch [:jump-reset]))\n      [:svg {:width \"100%\"\n             :view-box \"0 0 64 54\"}\n       (svg-paths megaman/cloud1 -64 0 0.15)\n       (svg-paths megaman/cloud1 128 0 0.15)\n       (svg-paths megaman/airman 150 1 0.2)\n       (svg-paths megaman/megaman1 0 48 0.2)\n       [:g [editor/block 28 30]\n        [editor/triforce 30.47 0.88 0.072]]\n       (svg-paths megaman/tile -8 71 0.2)\n       [:g.staff {:transform \"translate(0,13.5) scale(1)\"\n                  :style {:cursor \"url(/images/hand.png),crosshair\"}}\n        [notation/staff-lines]\n        [editor/retract-editor 2]\n         (svg-paths editor/piano 0 30 \"0.12,0.2\")\n        [editor/advance-editor]\n        [note-targets]\n        [note-guides]\n        ;[note-cursor]\n        [score-notes]\n        (if @(subscribe [:loop-end])\n          [editor/repeat-sign (+ 7 (* 6 @(subscribe [:loop-end]))) 8 0.13])]])))\n\n(defn debug-info []\n  [:div\n    [:p (str \"Play start: \" @(subscribe [:play-start]))]\n   [:p (str \"Song time: \" \n (- (.-currentTime @audiocontext) @(subscribe [:play-start])))]\n[:p \"Song data: \"]\n(into [:p]\n  (for [note @(subscribe [:notes])]\n    (pr-str note)))\n   ;[:p (str \"Mario run: \" @(subscribe [:mario-run]))]\n   [:p (str \"Mario run: \" @(subscribe [:mario-run]))]\n   [:p \n    (let [mouse-pos (subscribe [:focused-note-pos])]\n      (str \"Beat: \" (first @mouse-pos) \" Pitch: \" (last @mouse-pos)))]\n   [:p (str \"Tempo: \" @(subscribe [:tempo]))]\n   [:p (str \"Current position: \" @(subscribe [:current-position]))]\n   [:p (str \"Editor beat start: \" @(subscribe [:editor-beat-start]))]])\n\n(defn mecca []\n  [:div\n   [editor]\n   [transport/transport 140 0 0.5]\n   [editor/toolbar 71 0]\n   #_[:div\n    [:label {:for \"edn\"} \"Load song data:\"\n     [:p]\n     [:form\n      {:on-submit\n       (fn [e]\n         (.preventDefault e)\n         (dispatch [:set-notes (read-string (.. e -target -elements -edn -value))]))}\n      [:textarea {:id \"edn\" :name \"edn\"\n                  :rows 8 :cols 38}]\n      [:p]\n      [:input {:type \"submit\" :value \"Import\"}]]]]\n   [debug-info]\n   #_[:svg\n    (svg-paths [[\"#000000\" \"M0 0h14M0 1h1M13 1h1M0 2h1M4 2h1M13 2h1M0 3h1M3 3h2M13 3h1M0 4h1M2 4h1M4 4h1M9 4h1M13 4h1M0 5h1M2 5h4M8 5h1M13 5h1M0 6h1M4 6h1M7 6h1M13 6h1M0 7h1M6 7h1M9 7h1M13 7h1M0 8h1M5 8h1M8 8h2M13 8h1M0 9h1M4 9h1M7 9h1M9 9h1M13 9h1M0 10h1M7 10h4M13 10h1M0 11h1M9 11h1M13 11h1M0 12h1M13 12h1M0 13h1M13 13h1M0 14h14\"]\n                [\"#d6944a\" \"M1 1h1M12 1h1M1 13h1\"]\n                [\"#ffffff\" \"M2 1h10M1 2h1M1 3h1M1 4h1M1 5h1M1 6h1M1 7h1M1 8h1M1 9h1M1 10h1M1 11h1M1 12h1\"]\n                [\"#ffff00\" \"M2 2h2M5 2h7M2 3h1M5 3h7M3 4h1M5 4h4M10 4h2M6 5h2M9 5h3M2 6h2M5 6h2M8 6h4M2 7h4M7 7h2M10 7h2M2 8h3M6 8h2M10 8h2M2 9h2M5 9h2M8 9h1M10 9h2M2 10h5M11 10h1M2 11h7M10 11h2M2 12h10\"]\n                [\"#b54a00\" \"M12 2h1M12 3h1M12 4h1M12 5h1M12 6h1M12 7h1M12 8h1M12 9h1M12 10h1M12 11h1M12 12h1M2 13h11\"]]\n               0 0 5)]])\n"]}