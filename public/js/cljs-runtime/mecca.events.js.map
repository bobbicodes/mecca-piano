{"version":3,"sources":["mecca/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","day8.re_frame.undo.undoable.cljs$core$IFn$_invoke$arity$1","p__44977","vec__44978","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","time","pitch","cljs.core.update.cljs$core$IFn$_invoke$arity$3","note","p1__44976#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__44981","vec__44982","beats-per-measure","p__44985","vec__44986","notes","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__44989","vec__44990","mecca.music/play-song!","cljs.core/deref","mecca.music/audiocontext","p__44993","vec__44994","p__44997","vec__44998","cljs.core/not","p__45001","vec__45002","p__45005","vec__45006","p__45009","vec__45010","p__45013","vec__45014","G__45017","re-frame.core/dispatch","p__45018","vec__45019","pos","p__45022","vec__45023","instrument","p__45026","vec__45027","p__45032","vec__45033","G__45036","re-frame.core/subscribe","beat","G__45037","to-play","p1__45030#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","G__45038","p1__45031#","p__45040","vec__45041","p1__45039#","p__45045","vec__45046","p1__45044#","p__45049","vec__45050","p__45054","vec__45055","p1__45053#","p__45058","vec__45059","p__45062","vec__45063","tempo","p__45067","vec__45068","p1__45066#","p__45072","vec__45073","p1__45071#","p__45076","vec__45077","key","p__45080","vec__45081","p__45084","vec__45085","x","p__45089","vec__45090","G__45093","seconds-per-beat","p1__45088#","cljs.core/inc","p__45095","vec__45096","G__45099","G__45100","p1__45094#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","p__45101","vec__45102","mecca.music/play-sample","G__45105","cljs.core/conj","G__45106","p__45107","vec__45108","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__45111","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__45112","p__45113","vec__45114"],"sourcesContent":["(ns ^:figwheel-hooks mecca.events\n  (:require\n   [re-frame.core :refer [reg-event-db reg-event-fx dispatch subscribe]]\n   [re-pressed.core :as rp]\n   [day8.re-frame.undo :as undo :refer [undoable]]\n   [mecca.mario :as mario :refer [mario]]\n   [mecca.music :as music :refer [audiocontext]]\n   [goog.events :refer [listen unlisten]])\n  (:import [goog.events EventType]))\n\n(reg-event-db\n :initialize-db\n (fn [_ _]\n   {:focused-note-pos [nil nil]\n    :eraser? false\n    :playing? false\n    :play-start 0\n    :jumping? false\n    :sharp? false\n    :repeat? false\n    :loop-end nil\n    :current-position 0\n    :current-note 0\n    :next-note-time 0.0\n    :notes-in-queue []\n    :editor-beat-start 1\n    :instrument 28\n    :array-buffer nil\n    :key \"C\"\n    :time 0\n    :time-signature 4\n    :tempo 220\n    :notes []\n    :lead []\n    :bassline []\n    :drums []\n    :mario-x 54\n    :mario-y 61\n    :mario-jump 0\n    :mario-run 1\n    :xml \"\"}))\n\n(reg-event-db\n :remove-note\n (undoable \"remove note\")\n (fn [db [_ time pitch]]\n   (update db :notes\n           (fn [note]\n             (remove #(and (= time (:time %))\n                           (= pitch (:pitch %)))\n                     note)))))\n\n(reg-event-db\n :set-time-signature\n (fn [db [_ beats-per-measure]]\n   (update db :time-signature beats-per-measure)))\n\n(reg-event-db\n :set-notes\n (fn [db [_ notes]]\n   (assoc db :notes notes)))\n\n(reg-event-db\n :play-on\n (fn [db [_ _]]\n   (music/play-song!)\n   (assoc\n    (assoc db :play-start (.-currentTime @audiocontext))\n    :playing? true)))\n\n(reg-event-db\n :sharp-on\n (fn [db [_ _]]\n   (assoc db :sharp? true)))\n\n(reg-event-db\n :sharp-toggle\n (fn [db [_ _]]\n   (update db :sharp? not)))\n\n(reg-event-db\n :eraser-toggle\n (fn [db [_ _]]\n   (update db :eraser? not)))\n\n(reg-event-db\n :sharp-off\n (fn [db [_ _]]\n   (assoc db :sharp? false)))\n\n(reg-event-db\n :pause\n (fn [db [_ _]]\n   (assoc db :playing? false)))\n\n(reg-event-db\n :stop\n (fn [db [_ _]]\n   (dispatch [:reset-editor])\n   (assoc\n    (assoc db :playing? false)\n    :current-position 0)))\n\n(reg-event-db\n :update-focus-note\n (fn [db [_ pos]]\n   (assoc db :focused-note-pos pos)))\n\n(reg-event-db\n :select-instrument\n (fn [db [_ instrument]]\n   (assoc db :instrument instrument)))\n\n(reg-event-db\n :play-off\n (fn [db [_ _]]\n   (assoc db :playing? false)))\n\n(reg-event-db\n :advance-position\n (fn [db [_ _]]\n   (let [notes (subscribe [:notes])\n         beat (subscribe [:current-position])\n         to-play (filter #(= (+ 1 @beat) (:time %)) @notes)]\n     (if (< 4 @beat)\n       (dispatch [:advance-editor]))\n     #_(doall (for [{:keys [instrument pitch]} to-play]\n                (music/play-sample instrument (if @(subscribe [:sharp?]) (+ 0.5 pitch) pitch))))\n     (update db :current-position #(+ 0.5 %)))))\n\n(reg-event-db\n :advance-editor\n (fn [db [_ _]]\n   (update db :editor-beat-start #(+ 0.5 %))))\n\n(reg-event-db\n :move-mario\n (fn [db [_ _]]\n   (update db :mario-x #(+ 10 %))))\n\n(reg-event-db\n :reset-editor\n (fn [db [_ _]]\n   (assoc db :editor-beat-start 1)))\n\n(reg-event-db\n :retract-editor\n (fn [db [_ _]]\n   (update db :editor-beat-start #(- % 0.5))))\n\n(reg-event-db\n :reset-position\n (fn [db [_ _]]\n   (assoc db :current-position 0)))\n\n(reg-event-db\n :set-tempo\n (fn [db [_ tempo]]\n   (assoc db :tempo tempo)))\n\n(reg-event-db\n :inc-tempo\n (fn [db [_ tempo]]\n   (update db :tempo #(+ 8 %))))\n\n(reg-event-db\n :dec-tempo\n (fn [db [_ tempo]]\n   (update db :tempo #(- % 8))))\n\n(reg-event-db\n :set-key\n (fn [db [_ key]]\n   (assoc db :key key)))\n\n(reg-event-db\n :repeat-toggle\n (fn [db [_ _]]\n   (update db :repeat? not)))\n\n(reg-event-db\n :set-loop-end\n (fn [db [_ x]]\n   (assoc db :loop-end x)))\n\n(reg-event-db\n :next-note\n (fn [db [_ _]]\n   (let [tempo (subscribe [:tempo])\n         seconds-per-beat (/ 60.0 @tempo)]\n     (update \n      (update db :current-note inc)\n      :next-note-time #(+ % seconds-per-beat)))))\n\n(reg-event-db\n :schedule-note\n (fn [db [_ _]]\n   (let [notes (subscribe [:notes])\n         beat (subscribe [:current-note])\n         to-play (filter #(= (+ 1 @beat) (:time %)) @notes)]\n     (update db :notes-in-queue\n             into to-play))))\n\n(reg-event-db\n :add-note\n (undoable \"add note\")\n (fn [db [_ instrument time pitch]]\n   (if (= (.-state @audiocontext) \"suspended\")\n     (.resume @audiocontext))\n   (music/play-sample instrument (if @(subscribe [:sharp?]) (inc pitch) pitch))\n   (update db :notes\n           conj \n           {:time time\n            :instrument instrument\n            :pitch (if @(subscribe [:sharp?])\n                    (inc pitch) pitch)})))\n\n\n(reg-event-db\n :tick!\n (fn [db [_ _]]\n   (if (not= 0 @(subscribe [:mario-jump]))\n     (assoc db :mario-y (- 61\n                  (get [5 10 15 20 24 27 29 30\n                        30 29 27 24 20 15 10 5]\n                       @(subscribe [:mario-jump])))))))\n\n(reg-event-db\n :play-note\n (fn [db [_ pitch]]\n   (assoc db :notes-in-queue [{:pitch pitch\n                               :time  0}])))\n\n"]}