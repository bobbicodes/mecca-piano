{"version":3,"sources":["day8/re_frame/undo.cljs"],"mappings":"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","names":["day8.re-frame.undo/config","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","day8.re-frame.undo/undo-config!","new-config","temp__5733__auto__","unknown-keys","cljs.core/seq","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","G__42112","G__42113","G__42114","re-frame.core/console","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","day8.re-frame.undo/max-undos","day8.re-frame.undo/undo-list","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame.undo/redo-list","day8.re-frame.undo/app-explain","day8.re-frame.undo/undo-explain-list","day8.re-frame.undo/redo-explain-list","day8.re-frame.undo/clear-undos!","day8.re-frame.undo/clear-redos!","day8.re-frame.undo/clear-history!","day8.re-frame.undo/store-now!","explanation","cljs.core/vec","cljs.core/take-last","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fexpr__42115","re-frame.db/app-db","day8.re-frame.undo/undos?","day8.re-frame.undo/redos?","day8.re-frame.undo/undo-explanations","re-frame.core/reg-sub-raw","_","reagent.ratom/make-reaction","day8.re-frame.undo/undo","harvester","reinstater","undos","cur","redos","u","r","cljs.core/cons","G__42133","G__42134","cljs.core/last","cljs.core/pop","day8.re-frame.undo/undo-n","n","p__42135","vec__42137","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","day8.re-frame.undo/undo-handler","cljs.core/not","G__42140","G__42141","or__4185__auto__","day8.re-frame.undo/redo","G__42143","G__42144","cljs.core/first","cljs.core/rest","day8.re-frame.undo/redo-n","p__42148","vec__42149","day8.re-frame.undo/redo-handler","G__42152","G__42153","day8.re-frame.undo/purge-redo-handler","db","G__42154","G__42155","var_args","G__42157","day8.re-frame.undo/undoable","js/Error","day8.re_frame.undo.undoable.cljs$core$IFn$_invoke$arity$1","G__42158","G__42159","G__42160","G__42161","re-frame.core/->interceptor","context","event","G__42162","G__42163","re-frame.core/get-coeffect","undo-effect","G__42164","G__42165","re-frame.core/get-effect","cljs.core/fn?","G__42166","G__42167","G__42168","G__42169","G__42170","G__42171","G__42172","G__42173","G__42174","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","day8.re-frame.undo/register-events-subs!","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns day8.re-frame.undo\n  (:require-macros [reagent.ratom  :refer [reaction]])\n  (:require\n    [reagent.core        :as     reagent]\n    [re-frame.core       :as     re-frame]\n    [re-frame.db         :refer  [app-db]]))\n\n\n;; -- Configuration ----------------------------------------------------------\n\n(def config (atom {:max-undos    50   ;; Maximum number of undo states maintained\n                   :harvest-fn   deref\n                   :reinstate-fn reset!}))\n\n(defn undo-config!\n  \"Set configuration parameters for library.\n\n  Should be called on app startup.\"\n  [new-config]\n  (if-let [unknown-keys (seq (clojure.set/difference\n                               (-> new-config keys set)\n                               (-> @config keys set)))]\n    (re-frame/console :error \"re-frame-undo: undo-config! called within unknown keys: \" unknown-keys)\n    (swap! config merge new-config)))\n\n\n(defn max-undos\n  []\n  (:max-undos @config))\n\n\n\n;; -- State history ----------------------------------------------------------\n\n(def undo-list \"A list of history states\" (reagent/atom []))\n(def redo-list \"A list of future states, caused by undoing\" (reagent/atom []))\n\n;; -- Explanations -----------------------------------------------------------\n;;\n;; Each undo has an associated string explanation, for display to the user.\n;;\n;; It seems ugly to have mirrored vectors, but ...\n;; the code kinda falls out when you do. I'm feeling lazy.\n(def app-explain \"Mirrors app-db\" (reagent/atom \"\"))\n(def undo-explain-list \"Mirrors undo-list\" (reagent/atom []))\n(def redo-explain-list \"Mirrors redo-list\" (reagent/atom []))\n\n(defn clear-undos!\n  []\n  (reset! undo-list [])\n  (reset! undo-explain-list []))\n\n\n(defn clear-redos!\n  []\n  (reset! redo-list [])\n  (reset! redo-explain-list []))\n\n\n(defn clear-history!\n  []\n  (clear-undos!)\n  (clear-redos!)\n  (reset! app-explain \"\"))\n\n\n(defn store-now!\n  \"Stores the value currently in app-db, so the user can later undo\"\n  [explanation]\n  (clear-redos!)\n  (reset! undo-list (vec (take-last\n                           (max-undos)\n                           (conj @undo-list ((:harvest-fn @config) app-db)))))\n  (reset! undo-explain-list (vec (take-last\n                                   (max-undos)\n                                   (conj @undo-explain-list @app-explain))))\n  (reset! app-explain explanation))\n\n\n(defn undos?\n  \"Returns true if undos exist, false otherwise\"\n  []\n  (seq @undo-list))\n\n(defn redos?\n  \"Returns true if redos exist, false otherwise\"\n  []\n  (seq @redo-list))\n\n(defn undo-explanations\n  \"Returns a vector of undo descriptions, perhaps empty\"\n  []\n  (if (undos?)\n    (conj @undo-explain-list @app-explain)\n    []))\n\n;; -- subscriptions  -----------------------------------------------------------------------------\n\n(re-frame/reg-sub-raw\n  :undos?                   ;;  usage:  (subscribe [:undos?])\n  (fn handler\n    ; \"returns true if anything is stored in the undo list, otherwise false\"\n    [_ _]\n    (reaction (undos?))))\n\n(re-frame/reg-sub-raw\n  :redos?\n  (fn handler\n    ; \"returns true if anything is stored in the redo list, otherwise false\"\n    [_ _]\n    (reaction (redos?))))\n\n\n(re-frame/reg-sub-raw\n  :undo-explanations\n  (fn handler\n    ; \"returns a vector of string explanations ordered oldest to most recent\"\n    [_ _]\n    (reaction (undo-explanations))))\n\n(re-frame/reg-sub-raw\n  :redo-explanations\n  (fn handler\n    ; \"returns a vector of string explanations ordered from most recent undo onward\"\n    [_ _]\n    (reaction (deref redo-explain-list))))\n\n;; -- event handlers  ----------------------------------------------------------------------------\n\n\n(defn undo\n  [harvester reinstater undos cur redos]\n  (let [u @undos\n        r (cons (harvester cur) @redos)]\n    (reinstater cur (last u))\n    (reset! redos r)\n    (reset! undos (pop u))))\n\n\n(defn undo-n\n  \"undo n steps or until we run out of undos\"\n  [n]\n  (when (and (pos? n) (undos?))\n    (undo (:harvest-fn @config) (:reinstate-fn @config) undo-list app-db redo-list)\n    (undo deref reset! undo-explain-list app-explain redo-explain-list)\n    (recur (dec n))))\n\n(defn undo-handler\n  [_ [_ n]]\n  (if-not (undos?)\n    (re-frame/console :warn \"re-frame: you did a (dispatch [:undo]), but there is nothing to undo.\")\n    (undo-n (or n 1)))\n  {}) ; work is done directly on app-db\n\n(defn redo\n  [harvester reinstater undos cur redos]\n  (let [u (conj @undos (harvester cur))\n        r  @redos]\n    (reinstater cur (first r))\n    (reset! redos (rest r))\n    (reset! undos u)))\n\n(defn redo-n\n  \"redo n steps or until we run out of redos\"\n  [n]\n  (when (and (pos? n) (redos?))\n    (redo (:harvest-fn @config) (:reinstate-fn @config) undo-list app-db redo-list)\n    (redo deref reset! undo-explain-list app-explain redo-explain-list)\n    (recur (dec n))))\n\n(defn redo-handler\n  [_ [_ n]]  ;; if n absent, defaults to 1\n    (if-not (redos?)\n      (re-frame/console :warn \"re-frame: you did a (dispatch [:redo]), but there is nothing to redo.\")\n      (redo-n (or n 1)))\n    {})      ; work is done directly on app-db\n\n(defn purge-redo-handler\n  [db _]\n  (if-not (redos?)\n    (re-frame/console :warn \"re-frame: you did a (dispatch [:purge-redos]), but there is nothing to redo.\")\n    (clear-redos!))\n  db)\n\n\n;; -- Interceptors ----------------------------------------------------------\n\n(defn undoable\n  \"returns a side-effecting Interceptor, which stores an undo checkpoint in\n  `:after` processing.\n   If the `:effect` cotnains an `:undo` key, then use the explanation provided\n   by it. Otherwise, `explanation` can be:\n     - a string (of explanation)\n     - a function expected to return a string of explanation. It will be called\n       with two arguments: `db` and `event-vec`.\n     - a nil, in which case \\\"\\\" is recorded as the explanation\n  \"\n  ([] (undoable nil))\n  ([explanation]\n      (re-frame/->interceptor\n        :id     :undoable\n        :after  (fn [context]\n                  (let [event        (re-frame/get-coeffect context :event)\n                        undo-effect  (re-frame/get-effect context :undo)\n                        explanation (cond\n                                      (some? undo-effect)   undo-effect\n                                      (fn? explanation)     (explanation\n                                                              (re-frame/get-coeffect context :db)\n                                                              event)\n                                      (string? explanation) explanation\n                                      (nil? explanation)    \"\"\n                                      :else (re-frame/console :error \"re-frame-undo: \\\"undoable\\\" interceptor on event \" event \" given a bad parameter. Got: \" explanation))]\n                    (store-now! explanation)\n                    (update context :effects dissoc :undo))))))   ;; remove any `:undo` effect. Already handled.\n\n\n;; -- register handlers for events and subscriptions\n\n\n(defn register-events-subs!\n  []\n  (re-frame/reg-event-fx\n    :undo                     ;; usage:  (dispatch [:undo n])  n is optional, defaults to 1\n    undo-handler)\n  (re-frame/reg-event-fx\n    :redo                     ;; usage:  (dispatch [:redo n])\n    redo-handler)\n  (re-frame/reg-event-db\n    :purge-redos              ;; usage:  (dispatch [:purge-redos])\n    purge-redo-handler))\n\n(register-events-subs!)\n"]}